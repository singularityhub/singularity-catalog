Bootstrap: localimage
From: ubuntu_jammy.sif
%labels
MAINTAINER  Edoardo Apra <edoardo.apra@pnnl.gov>

%setup
    ls -la  ${GITHUB_WORKSPACE} \
&&     export CACHEDIR=${GITHUB_WORKSPACE}/../../../cache\
&&     rm -f ${SINGULARITY_ROOTFS}/*.txt || true\
&&     bash -c "if [[ -z '${FC}' ]]; then echo 'FC=gfortran ' >> ${SINGULARITY_ROOTFS}/fc.txt ; else echo 'FC is ${FC}'; echo 'FC=${FC} ' >> ${SINGULARITY_ROOTFS}/fc.txt ; fi"\
&&     bash -c "if [[ -z '${CC}' ]]; then echo 'CC=gcc ' >> ${SINGULARITY_ROOTFS}/fc.txt ; else echo 'CC is ${CC}'; echo 'CC=${CC} ' >> ${SINGULARITY_ROOTFS}/fc.txt ; fi"\
&&     bash -c "if [[ -z '${MPICH}' ]]; then echo 'MPICH=3.4.2 ' >> ${SINGULARITY_ROOTFS}/MPICH.txt ; else echo 'MPICH is ${MPICH}'; echo 'MPICH=${MPICH} ' >> ${SINGULARITY_ROOTFS}/mpich.txt ; fi"\
&&     bash -c "if [[ -z '${OFI}' ]]; then echo 'OFI=builtin ' >> ${SINGULARITY_ROOTFS}/OFI.txt ; else echo 'OFI is ${OFI}'; echo 'OFI=${OFI} ' >> ${SINGULARITY_ROOTFS}/ofi.txt ; fi"\
&&     bash -c "if [[ -z '${MPICH_DEVICE}' ]]; then echo 'MPICH_DEVICE=ch4:ofi ' >> ${SINGULARITY_ROOTFS}/MPICH_DEVICE.txt ; else echo 'MPICH_DEVICE is ${MPICH_DEVICE}'; echo 'MPICH_DEVICE=${MPICH_DEVICE} ' >> ${SINGULARITY_ROOTFS}/mpich_device.txt ; fi"\
&&     bash -c "if [[ -z '${ARMCI_NETWORK}' ]]; then echo 'ARMCI_NETWORK=MPI-PR ' >> ${SINGULARITY_ROOTFS}/armci_network.txt ; else echo 'ARMCI_NETWORK is ${ARMCI_NETWORK}'; echo 'ARMCI_NETWORK=${ARMCI_NETWORK} ' >> ${SINGULARITY_ROOTFS}/armci_network.txt ; fi"\
&&     bash -c "if [[ -z '${MPI_IMPL}' ]]; then echo 'MPI_IMPL=mpich ' >> ${SINGULARITY_ROOTFS}/mpi_impl.txt ; else echo 'MPI_IMPL is ${MPI_IMPL}'; echo 'MPI_IMPL=${MPI_IMPL} ' >> ${SINGULARITY_ROOTFS}/mpi_impl.txt ; fi"\
&&     bash -c "if [[ -z '${BRANCH}' ]]; then echo 'BRANCH=master ' >> ${SINGULARITY_ROOTFS}/branch.txt ; else echo 'BRANCH is ${BRANCH}'; echo 'BRANCH=${BRANCH} ' >> ${SINGULARITY_ROOTFS}/branch.txt ; fi"\
&&     bash -c "if [[ -z '${MYUSERNAME}' ]]; then echo 'MYUSERNAME=nwchemgit ' >> ${SINGULARITY_ROOTFS}/myusername.txt ; else echo 'MYUSERNAME is ${MYUSERNAME}'; echo 'MYUSERNAME=${MYUSERNAME} ' >> ${SINGULARITY_ROOTFS}/myusername.txt ; fi"\
&&     ls -lrt ${CACHEDIR} || true\
&&     ls -la  ${CACHEDIR}/ || true\
&&     ls -la  ${CACHEDIR}/mpich || true\
&&     ls -la  ${CACHEDIR}/mpich/lib || true\
&&     ls -la  ${CACHEDIR}/pmix || true\
&&     ls -la  ${CACHEDIR}/simint_install/lib/libnwc_simint.a || true\
&&     ls -la  ${CACHEDIR}/simint_install/lib/libsimint.a ||true\
&&     bash -c "if [ ! -z "${GITHUB_WORKSPACE}" ]; then mkdir -p ${SINGULARITY_ROOTFS}/nwchem/contrib; rsync -a ${GITHUB_WORKSPACE}/nwchem/src ${SINGULARITY_ROOTFS}/nwchem/. ; rsync -a ${GITHUB_WORKSPACE}/nwchem/contrib/getmem.nwchem ${SINGULARITY_ROOTFS}/nwchem/contrib/. ;rsync -a ${GITHUB_WORKSPACE}/nwchem/travis ${SINGULARITY_ROOTFS}/nwchem/. ; rsync -a ${GITHUB_WORKSPACE}/nwchem/.git ${SINGULARITY_ROOTFS}/nwchem/. ; fi"\
&&     bash -c "if [[  -f ${CACHEDIR}/mpich/lib/libmpi.a ]]; then mkdir -p ${SINGULARITY_ROOTFS}/opt ;rsync -a ${CACHEDIR}/mpich ${SINGULARITY_ROOTFS}/opt/. ; echo mpich cache fetched ;fi"\
&&     bash -c "if [[  -f ${CACHEDIR}/pmix/etc/pmix-mca-params.conf ]]; then mkdir -p ${SINGULARITY_ROOTFS}/opt ;rsync -a ${CACHEDIR}/pmix ${SINGULARITY_ROOTFS}/opt/. ; echo pmix cache fetched ;fi"\
&&     bash -c "if [[  -f ${CACHEDIR}/libext/lib/libnwc_openblas.a ]]; then rsync -a ${CACHEDIR}/libext/* ${SINGULARITY_ROOTFS}/nwchem/src/libext/. ; echo libext cache fetched ;fi"\
&&     bash -c "if [[  -f ${CACHEDIR}/simint_install/lib/libsimint.a ]]; then rsync -av ${CACHEDIR}/simint* ${SINGULARITY_ROOTFS}/nwchem/src/NWints/simint/libsimint_source/. ;  ls -l ${SINGULARITY_ROOTFS}/nwchem/src/NWints/simint/libsimint_source/; echo simint cache fetched ;fi"

##%files
##    ${GITHUB_WORKSPACE}/nwchem nwchem

%post
#https://sylabs.io/guides/3.6/user-guide/mpi.html
export DEBIAN_FRONTEND=noninteractive \
&& export MPICH_AURORA="4.3.0" \
&& export PMIX_VERSION="4.2.9" \
&& export MPICH_DIR=/opt/mpich\
&& export PATH=$MPICH_DIR/bin:/opt/intel/oneapi/compiler/latest/bin:/opt/intel/oneapi/compiler/latest/linux/bin/intel64:/root//apps/oneapi/compiler/latest/linux/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \
&& export LD_LIBRARY_PATH=$MPICH_DIR/lib:/opt/intel/oneapi/compiler/latest/lib:/opt/intel/oneapi/compiler/latest/linux/lib:/opt/intel/oneapi/compiler/latest/linux/lib/x64:/opt/intel/oneapi/compiler/latest/linux/compiler/lib/intel64_lin \
&& export LIBRARY_PATH=/opt/intel/oneapi/compiler/latest/lib:/opt/intel/oneapi/compiler/latest/linux/compiler/lib/intel64_lin:/opt/intel/oneapi/compiler/latest/linux/lib \
&& export SINGULARITY_PATH=$MPICH_DIR/bin:/opt/intel/oneapi/compiler/latest/bin:/opt/intel/oneapi/compiler/latest/linux/bin/intel64:/opt/intel/oneapi/compiler/latest/linux/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \
&& export SINGULARITY_LD_LIBRARY_PATH=$MPICH_DIR/lib:/opt/intel/oneapi/compiler/latest/lib:/opt/intel/oneapi/compiler/latest/linux/lib:/opt/intel/oneapi/compiler/latest/linux/lib/x64:~/apps/oneapi/compiler/latest/linux/compiler/lib/intel64_lin \
&& export SINGULARITY_LIBRARY_PATH=/opt/intel/oneapi/compiler/latest/lib:/opt/intel/oneapi/compiler/latest/linux/compiler/lib/intel64_lin:/opt/intel/oneapi/compiler/latest/linux/lib \
&& export `cat ./fc.txt`\
&& export `cat ./cc.txt`\
&& export `cat ./mpich.txt`\
&& export `cat ./ofi.txt`\
&& export `cat ./armci_network.txt`\
&& export `cat ./mpi_impl.txt`\
&& export `cat ./branch.txt`\
&& export `cat ./myusername.txt`\
&& export `cat ./mpich_device.txt`\
&& echo FC is $FC\
&& echo CC is $CC\
&& echo MPICH is $MPICH\
&& if [ $MPICH = aurora ]; then
    export MPICH_VERSION=$MPICH_AURORA
    	   else
    export MPICH_VERSION=$MPICH
fi \
&& echo OFI is $OFI\
&& echo MPICH_DEVICE is $MPICH_DEVICE\
&& export mpich_prefix=mpich-$MPICH_VERSION\
&& echo mpich_prefix is $mpich_prefix \
&& export mpich_major=$(echo $MPICH_VERSION | cut -d . -f1) \
&& echo mpich_major is $mpich_major \
&& export mpich_minor=$(echo $MPICH_VERSION | cut -d . -f2) \
&& echo mpich_minor is $mpich_minor \
&& echo mpich_major is $mpich_major \
&& if [ $mpich_major = '4' ]; then
    export mpich_options=' '
else
    export mpich_options=' '
fi \
&& if [ $MPICH = aurora ]; then
    export mpich_options=$mpich_options' --disable-maintainer-mode --with-pm=no --enable-romio --with-slurm=no --with-pmi=pmix --with-pmix=/opt/pmix '
fi \
&& export GCC_VERSION=11 \
&& echo mpich_options $mpich_options \
&& echo ARMCI_NETWORK is $ARMCI_NETWORK\
&& echo MPI_IMPL is $MPI_IMPL\
&& echo BRANCH is $BRANCH\
&& pwd \
&& apt-get -y update \
&& apt-get -y install -y tzdata git moreutils  wget rsync  sudo ca-certificates \
&& wget https://github.com/moparisthebest/static-curl/releases/download/v8.1.2/curl-amd64 -O /usr/bin/curl \
&& chmod +x /usr/bin/curl \
&& echo ca_certificate=/etc/ssl/certs/ca-certificates.crt >  ~/.wgetrc \
&& echo        "cacert=/etc/ssl/certs/ca-certificates.crt" >> ~/.curlrc \
&& bash -o  pipefail -c "if [[ $(echo $FC | cut -c -8) == gfortran ]]; then apt-get -y install -y  ${FC}; fi" \
&& bash -o  pipefail -c "if [[ $(echo $CC | cut -c -8) == gcc ]]; then apt-get -y install -y  ${CC}; fi" \
&& pwd \
&& echo '@@ ls -lart ' \
&& ls -lart  \
&& echo '@@ ls on /opt' \
&& ls -lart /opt \
&& echo " ==========" \
&& pwd \
&& echo pwd $(pwd) \
&& echo 'ls nwchem' $(ls -lrta nwchem) \
&& echo 'ls nwchem/src' $(ls -lrta nwchem/src) \
&& bash -o  pipefail -c "if [[ ! -f nwchem/src/GNUmakefile ]]; then wget --progress=dot:giga https://github.com/${MYUSERNAME}/nwchem/tarball/${BRANCH} -O - | tar -xz  --exclude=web --exclude=examples --exclude=doc --exclude="nwxc*"  --exclude="chem-library-tests" && mv    ${MYUSERNAME}-nwchem-* nwchem ; fi " \
&& apt-get -y install -y   tar libnl-3-200 libnl-route-3-200 libgomp1 libnuma1 \
 g++ gfortran   make patch   unzip perl-base file \
 python3 python3-dev cmake  unzip zip perl automake libtool autoconf flex  \
 libnuma-dev libslurm-dev slurm-client\
 libpmix-dev libpmix2 \
libpmi2-0-dev libpmi0-dev  \
 libnl-3-dev  libnl-route-3-dev udev \
 librdmacm-dev librdmacm1 rdma-core libibverbs-dev  ibverbs-providers  \
 libhwloc-dev \
 pkg-config gawk  software-properties-common gdb\
-&&  apt-get -y install -y libpmix-bin libpmix-dev libpmix2 \
-&&    apt-get -y install -y libpmi2-0-dev libpmi0-dev \
&& if [ $mpich_major = '5' ]; then
    apt-get -y install -y libpmix-bin libpmix-dev libpmix2
else
    apt-get -y install -y libpmi2-0-dev libpmi0-dev
fi \
&& add-apt-repository -y ppa:ubuntu-toolchain-r/test && apt-get update \
            && apt-get install -q=2 -y  gcc-"$GCC_VERSION"  g++-"$GCC_VERSION" gfortran-"$GCC_VERSION" libgfortran-"$GCC_VERSION"-dev  make patch curl rsync wget git file  bzip2 tar gnupg2  \
&& update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-"$GCC_VERSION" 100 \
&& update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-"$GCC_VERSION" 100 \
&& update-alternatives --install /usr/bin/gfortran gfortran /usr/bin/gfortran-"$GCC_VERSION" 100 \
            && apt-get install  -q=2 -y  autoconf automake libtool git \
&& apt-get clean \
&& set -x \
&& if [ $FC = 'ifx' ]; then
    APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1 \
    && TERM=dumb \
    && wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null \
    && echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" |sudo tee /etc/apt/sources.list.d/oneAPI.list \
    && sudo apt-get update \
    && sudo apt-get install -y intel-oneapi-compiler-fortran intel-oneapi-mkl intel-oneapi-compiler-dpcpp-cpp
fi \
&& ls -lrt /opt/intel/oneapi || true \
&& echo TTTTT \
&& df -h \
&& echo TTTTT \
&& echo "PATH" $PATH \
&& echo "LD_LIBRARY_PATH" $LD_LIBRARY_PATH \
&& echo FFFFF \
&& echo 'FC -v ' `$FC -v` \
&& echo 'CC -v ' `$CC -v` \
&& echo ' CC is ' "$CC" \
&& echo ' CXX is ' "$CXX" || true \
&& echo 'ls -l /opt/mpich/lib/libmpi.a' $(ls -l /opt/mpich/lib/libmpi.a) || true \
&& bash -o pipefail -c "if [[ ! -f /opt/mpich/lib/libmpi.a ]]; then  \
$FC -v \
&& wget --progress=dot:giga https://github.com/Cray-HPE/xpmem/tarball/master -O xpmem.tar.gz \
&& tar xzf xpmem.tar.gz \
&& rm xpmem.tar.gz \
&& cd Cray-HPE-xpmem* \
&& sh autogen.sh \
&& ./configure --prefix=$MPICH_DIR --disable-kernel-module  \
&& make -j3 \
&& make install \
&& cd .. \
&& if [ $MPICH = aurora ]; then
wget https://github.com/openpmix/openpmix/releases/download/v${PMIX_VERSION}/pmix-${PMIX_VERSION}.tar.gz \
&& tar xzf pmix-${PMIX_VERSION}.tar.gz \
&& cd pmix-${PMIX_VERSION} \
&& ./configure --prefix=/opt/pmix \
&& make -j3 \
&& make -j3 install \
&& cd .. \
&& rm -rf pmix-*.*
fi \
&& if [[ ${MPICH_DEVICE} != ch4:ofi ]]; then echo 'installing ucx' ; \
   export ucx=1.11.0 ; \
   echo 'the ucx version is'  \$ucx ; \
   wget --progress=dot:giga  https://github.com/openucx/ucx/releases/download/v\$ucx/ucx-\$ucx.tar.gz ; \
   tar xzf ucx-\$ucx.tar.gz && rm ucx-\$ucx.tar.gz  ;\
   cd ucx-\$ucx ; \
   wget https://raw.githubusercontent.com/edoapra/nwchem-singularity/master/nwchem-dev.ompi41x.ifx/ucx_malloc.patch ;\
   patch -p0 < ./ucx_malloc.patch ;\
   mkdir -p build && cd build ;\
   ../configure --prefix=\$MPICH_DIR --disable-logging --disable-debug --disable-assertions --disable-params-check ;\
   make -j4 && make install ;\
   export mpich_options='$mpich_options --with-ucx=$MPICH_DIR' ; \
 if [ ! -f $MPICH_DIR/bin/ucx_info ]; then echo ucx_info\ not\ found ; exit 1 ; fi ;\
elif [[ ${OFI} == builtin ]]; then echo 'builtin OFI - nothing to download'; \
  else if [[ ${OFI} == git ]]; then export COMMIT=c3420a7402a10f5fe3f475ac5eb39b3f2837f8d1  \
 && curl -L https://github.com/ofiwg/libfabric/archive/\$COMMIT.tar.gz -o libfabric-\$COMMIT.tar.gz  \
 && tar xzf libfabric-\$COMMIT.tar.gz  \
 && ls -lrt \
 && mv libfabric-\$COMMIT libfabric-git \
 && cd libfabric-git && sh autogen.sh;\
   apt-get install -y libconfig-dev libsensors-dev libuv1-dev libfuse-dev libyaml-dev libjson-c-dev libcurl4-openssl-dev  ;\
   cd / ; ls -lrta  ;\
   mkdir -p $MPICH_DIR  ;\
   cd $MPICH_DIR ; \
   export SHSTAG=release/shs-12.0 ;\
   git clone https://github.com/HewlettPackard/shs-cassini-headers ;\
   git clone --branch \$SHSTAG https://github.com/HewlettPackard/shs-cxi-driver ;\
   cd / ; \
   git clone --branch \$SHSTAG https://github.com/HewlettPackard/shs-libcxi ; \
   cd shs-libcxi ; \
   sh autogen.sh ; \
   ./configure --prefix=$MPICH_DIR ;\
   make CFLAGS='-I$MPICH_DIR/shs-cassini-headers/include/ -I$MPICH_DIR/shs-cxi-driver/include/' pkg_CFLAGS=-Wall -i  ;\
   make CFLAGS='-I$MPICH_DIR/shs-cassini-headers/include/ -I$MPICH_DIR/shs-cxi-driver/include/' install-dist_cxi_yamlDATA install-man install-pkgconfigDATA install-pkgincludeHEADERS  install-exec   ;\
   export libfabric_options=' --enable-cxi=$MPICH_DIR  --with-cassini-headers=$MPICH_DIR/shs-cassini-headers --with-cxi-uapi-headers=$MPICH_DIR/shs-cxi-driver '; \
 echo 'libfabric_options are' \$libfabric_options ; \
 rm -rf shs-* ; \
 cd / ; echo 'pwd ' $(pwd) ;ls -lrta ; \
else wget --progress=dot:giga  https://github.com/ofiwg/libfabric/releases/download/v'$OFI'/libfabric-'$OFI'.tar.bz2 -O - | tar --no-same-owner  -xjf - ; export libfabric_options=' '; fi ;\
  cd libfabric-'$OFI' ;\
 mkdir build && cd build ; \
 ../configure --prefix=$MPICH_DIR \$libfabric_options ;\
 make -j4 && make install ; \
 export mpich_options='$mpich_options --with-libfabric=$MPICH_DIR' ; \
 echo 'mpich_options are \$mpich_options' ;\
if [ ! -f $MPICH_DIR/bin/fi_info ]; then echo fi_info\ not\ found ; exit 1 ; fi \
   fi  \
&& cd .. \
&& rm -rf libfabr* \
&& echo ' mpich_options is set to' \$mpich_options \
&& wget  --progress=dot:giga https://www.mpich.org/static/downloads/${MPICH_VERSION}/mpich-'$MPICH_VERSION'.tar.gz  -O - | tar xzf -   \
&& cd $mpich_prefix                                                        && \
./configure  --prefix=$MPICH_DIR   \
\$mpich_options \
--with-device=$MPICH_DEVICE  \
--enable-fortran=all \
--disable-opencl --enable-silent-rules \
--disable-cuda \
--with-xpmem=$MPICH_DIR \
 FFLAGS=' -fallow-argument-mismatch ' \
 FCFLAGS=' -fallow-argument-mismatch ' \
  FC=$FC \
&& head config.log \
&& tail -300 config.log \
&& make FC=$FC -j 6                                                  \
&& make install                  \
&& if [ ! -f $MPICH_DIR/bin/mpif90 ]; then echo mpif90\ not\ found ; exit 1 ; fi \
&& echo mpif90 show is $($MPICH_DIR/bin/mpif90 -show) \
&& cd .. ; rm -rf *tar*gz mpich-*  ;fi " \
&& if [ ! -f $MPICH_DIR/bin/mpif90 ]; then echo mpif90\ not\ found ; exit 1 ; fi \
&& echo '********'  \
&& export PATH=$MPICH_DIR/bin:$PATH\
&& export LD_LIBRARY_PATH=$MPICH_DIR/lib:$LD_LIBRARY_PATH\
&& echo ARMCI_NETWORK is $ARMCI_NETWORK\
&& export NWCHEM_TARGET=LINUX64\
&& export NWCHEM_MODULES="all python gwmol xtb"\
&& export USE_OPENMP=1 \
&& export USE_TBLITE=1 \
&& if [ "$FC" = "gfortran" ]; then 
   export BUILD_PLUMED=1;    export PYTHON_BIN=python3;   export BUILD_ELPA=1
fi	   \
&& export BUILD_OPENBLAS=1\
&& export BUILD_SCALAPACK=1\
&& export BLAS_SIZE=8\
&& export SCALAPACK_SIZE=8\
&& export USE_MPI=y\
&& export USE_MPIF=y\
&& export USE_MPIF4=y\
&& export USE_HWOPT=n\
&& export USE_LIBXC=y\
&& export USE_NOIO=y\
&& export IPCCSD=y \
&& export EACCSD=y \
&& export MRCC_METHODS=y \
&& export USE_SIMINT=y \
&& export SIMINT_MAXAM=6\
&& export SIMINT_VECTOR=AVX2 \
&& export USE_OPENMP=1 \
&& export PYTHONVERSION=$(python -V| cut -d ' ' -f 2 |cut -d . -f 1-2) \
&& ls -l nwchem* || true \
&& /usr/bin/env|egrep BUILD_ \
&& echo " ==========" \
&& pwd \
&& echo pwd $(pwd) \
&& echo 'ls nwchem' $(ls -lrta nwchem) \
&& echo 'ls nwchem/src' $(ls -lrta nwchem/src) \
&& cd nwchem \
&& echo "output of git describe  --always " `git describe  --always` || true \
&& wget https://raw.githubusercontent.com/edoapra/nwchem-singularity/master/nwchem-dev.ompi41x.ifx/largebasis.patch \
&& patch -p1 < largebasis.patch \
&& wget https://raw.githubusercontent.com/edoapra/nwchem-singularity/master/nwchem-dev.ompi5x/okeep.patch \
&& patch -p1 < okeep.patch \
&& export NWCHEM_TOP=`pwd` \
&& echo 'ls -lrta ' $(ls -lrta) \
&& echo 'pwd ' $(pwd) \
&& cd src \
&& echo 'ls -lrta ' $(ls -lrta) \
&& echo 'pwd ' $(pwd) \
&& ls -lrt libext/lib || true \
&& make nwchem_config || { echo "config Failure"; exit 1; } \
&& bash -o pipefail -c " \
echo 'ls ~/' `ls -lrt ~/` \
&& echo '222 PATH is ' `/usr/bin/env | grep PATH` \
&& echo '111 which FC ' `which $FC` || true \
&& mpif90 -show \
&& echo FC is $FC \
&& $FC -v \
&& make FC=$FC -j6 || { echo 'Compilation Failure'; exit 1; } \
&& FC=$FC ../contrib/getmem.nwchem 2000   \
&& make FC=$FC install INSTALL_PREFIX=/opt/nwchem \
&& ldd  ../bin/LINUX64/nwchem  "\
&& if [ -f /opt/intel/oneapi/compiler/latest/env/vars.sh ]; then  \
rsync -av /opt/intel/oneapi/compiler/latest/lib/lib*.so* $MPICH_DIR/lib/. ; fi \
&&  rm -rf /opt/intel/oneapi/  /opt/nwchem/src/tce /opt/nwchem/src/NWints/simint/libsimint_source/simint.l?_p?_d? || true \
&& DEBIAN_FRONTEND=noninteractive apt-get clean -y \
&& DEBIAN_FRONTEND=noninteractive apt-get -y install localepurge \
&& echo MANDELETE >  /etc/locale.nopurge \
&& echo DONTBOTHERNEWLOCALE >> /etc/locale.nopurge \
&& echo en_US.UTF-8 >> /etc/locale.nopurge \
&& localepurge \
&& rm -rf /usr/share/doc  /usr/share/man \
&& du -sh /opt/nwchem \
&& du -sk /opt/nwchem/*|sort -n \
&& rm -rf ../.git \
&& rm -rf tce tools nwdft NWints/simint/libsimint_source/simint.l?_p?_d? geom symmetry util nwxc ddscf lapack blas rism argos peigs rmdft gradients symmetry property smd lucia dplot propery hessian ccsd mp2_grad moints cafe analyz dimqm   develop libext/scalapack libext/openblas libext/libxc/libxc* libext/plumed* libext/libext_utils  libext/elpa  ../lib  \
&& du -sh * |sort -n \
&& cd ../.. \
&& du -sh nwchem \
&& du -sk *|sort -n  \
&& bash -o pipefail -c "if [[ $FC == 'ifx' ]] ; then \
rm -rf ~/apps  /var/intel  l_*sh ; fi"   \
&& ls -lrth    \
&&  ldd  /opt/nwchem/bin/nwchem  \
&& du -sk *|sort -n \
&& echo "dddddddddddd"  \
&& dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100 \
&& echo "dddddddddddd" \
&&  du -sk /tmp/* || true \
&&  ls -lart /tmp ||true \
&&  apt-get  -y purge cmake git  gcc-"$GCC_VERSION"  g++-"$GCC_VERSION"  gfortran-"$GCC_VERSION"  libstdc++-"$GCC_VERSION"-dev  libgcc-"$GCC_VERSION"-dev git \
&& apt-get -y install libgcc-s1 libgfortran5 libatomic1 libquadmath0 \
&& apt-get -y autoremove && apt-get clean



#clean unnecessary packages

#apt-get -y purge curl wget tar  cmake  unzip zip perl automake libtool autoconf flex  \
#&&  apt-get -y autoremove && apt-get clean

#cd /data
%environment
export MPICH_DIR=/opt/mpich
export SINGULARITY_MPICH_DIR=$MPICH_DIR
export SINGULARITYENV_APPEND_PATH=$MPICH_DIR/bin
export SINGULARITYENV_APPEND_LD_LIBRARY_PATH=$MPICH_DIR/lib
export OMP_NUM_THREADS=1
export SINGULARITY_OMP_NUM_THREADS=1
export COMEX_MAX_NB_OUTSTANDING=12
export SINGULARITY_COMEX_MAX_NB_OUTSTANDING=12
#export nwchem_hash=77ba3a6e1dd6f9ba26879d0416bb93b302f1f4f7
#export NWCHEM_TOP=/opt/nwchem
export NWCHEM_SHARE=/opt/nwchem/share/
export FFIELD=amber
export AMBER_1=$NWCHEM_SHARE/data/amber_s/
export AMBER_2=$NWCHEM_SHARE/data/amber_q/
export AMBER_3=$NWCHEM_SHARE/data/amber_x/
export AMBER_4=$NWCHEM_SHARE/data/amber_u/
export SPCE=${NWCHEM_SHARE}/data/solvents/spce.rst
export CHARMM_S=$NWCHEM_SHARE/data/charmm_s/
export CHARMM_X=$NWCHEM_SHARE/data/charmm_x/
export PATH=$PATH:/opt/nwchem/bin/
export PATH=$MPICH_DIR/bin:$PATH
export NWCHEM_BASIS_LIBRARY=${NWCHEM_SHARE}//libraries/
export NWCHEM_NWPW_LIBRARY=${NWCHEM_SHARE}//libraryps/
export LD_LIBRARY_PATH=$MPICH_DIR/lib:$LD_LIBRARY_PATH
#%runscript
#exec /bin/bash "$@"

#&& export FORCETARGET=" TARGET=ZEN " \
#&& export GFORTRAN_MARCH=znver3 \
