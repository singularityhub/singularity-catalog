Bootstrap: docker
From: ubuntu:22.04
%labels
MAINTAINER  Edoardo Apra <edoardo.apra@pnnl.gov>

%setup
    #!/bin/bash
    echo "$(readlink /proc/$$/exe) is the shell in use"
    env|egrep SHELL
    ls -la  ${GITHUB_WORKSPACE}
    export CACHEDIR=${GITHUB_WORKSPACE}/../../../cache
#    echo '@@@ ls -l $SINGULARITY_ROOTFS'
#    ls -l ${SINGULARITY_ROOTFS}
    rm -f ${SINGULARITY_ROOTFS}/*.txt || true
    bash -c "if [[ -z '${FC}' ]]; then echo 'FC=gfortran ' >> ${SINGULARITY_ROOTFS}/fc.txt ; else echo 'FC is ${FC}'; echo 'FC=${FC} ' >> ${SINGULARITY_ROOTFS}/fc.txt ; fi"
    bash -c "if [[ -z '${ARMCI_NETWORK}' ]]; then echo 'ARMCI_NETWORK=MPI-PR ' >> ${SINGULARITY_ROOTFS}/armci_network.txt ; else echo 'ARMCI_NETWORK is ${ARMCI_NETWORK}'; echo 'ARMCI_NETWORK=${ARMCI_NETWORK} ' >> ${SINGULARITY_ROOTFS}/armci_network.txt ; fi"
    bash -c "if [[ -z '${MPI_IMPL}' ]]; then echo 'MPI_IMPL=ompi ' >> ${SINGULARITY_ROOTFS}/mpi_impl.txt ; else echo 'MPI_IMPL is ${MPI_IMPL}'; echo 'MPI_IMPL=${MPI_IMPL} ' >> ${SINGULARITY_ROOTFS}/mpi_impl.txt ; fi"
    bash -c "if [[ -z '${BRANCH}' ]]; then echo 'BRANCH=master ' >> ${SINGULARITY_ROOTFS}/branch.txt ; else echo 'BRANCH is ${BRANCH}'; echo 'BRANCH=${BRANCH} ' >> ${SINGULARITY_ROOTFS}/branch.txt ; fi"
    bash -c "if [[ -z '${MYUSERNAME}' ]]; then echo 'MYUSERNAME=nwchemgit ' >> ${SINGULARITY_ROOTFS}/myusername.txt ; else echo 'MYUSERNAME is ${MYUSERNAME}'; echo 'MYUSERNAME=${MYUSERNAME} ' >> ${SINGULARITY_ROOTFS}/myusername.txt ; fi"
    ls -lrt ${CACHEDIR} || true
    ls -la  ${CACHEDIR}/ || true
    ls -la  ${CACHEDIR}/ompi || true
    ls -la  ${CACHEDIR}/ompi/lib || true
    ls -la  ${CACHEDIR}/simint.l5_p5_d1.install/lib/libnwc_simint.a || true
    ls -la  ${CACHEDIR}/simint.l5_p5_d1.install/lib/libsimint.a ||true
    bash -c "if [ ! -z "${GITHUB_WORKSPACE}" ]; then mkdir -p ${SINGULARITY_ROOTFS}/nwchem/contrib; rsync -a ${GITHUB_WORKSPACE}/nwchem/src ${SINGULARITY_ROOTFS}/nwchem/. ; rsync -a ${GITHUB_WORKSPACE}/nwchem/contrib/getmem.nwchem ${SINGULARITY_ROOTFS}/nwchem/contrib/. ;rsync -a ${GITHUB_WORKSPACE}/nwchem/travis ${SINGULARITY_ROOTFS}/nwchem/. ; rsync -a ${GITHUB_WORKSPACE}/nwchem/.git ${SINGULARITY_ROOTFS}/nwchem/. ; fi"
    echo done1
    bash -c "if [[  -f ${CACHEDIR}/ompi/lib/libmpi.so ]]; then mkdir -p ${SINGULARITY_ROOTFS}/opt ;rsync -a ${CACHEDIR}/ompi ${SINGULARITY_ROOTFS}/opt/. ; echo ompi/ucx cache fetched ;fi"
    bash -c "if [[  -f ${CACHEDIR}/libext/lib/libnwc_openblas.a ]]; then rsync -a ${CACHEDIR}/libext/* ${SINGULARITY_ROOTFS}/nwchem/src/libext/. ; echo libext cache fetched ;fi"
    bash -c "if [[  -f ${CACHEDIR}/simint.l5_p5_d1.install/lib/libsimint.a ]]; then rsync -av ${CACHEDIR}/simint.l5_p5_d1.install ${SINGULARITY_ROOTFS}/nwchem/src/NWints/simint/libsimint_source/. ; ln -sf ${SINGULARITY_ROOTFS}/nwchem/src/NWints/simint/libsimint_source/simint.l5_p5_d1.install  ${SINGULARITY_ROOTFS}/nwchem/src/NWints/simint/libsimint_source/simint_install;  ls -l ${SINGULARITY_ROOTFS}/nwchem/src/NWints/simint/libsimint_source/; echo simint cache fetched ;fi"

##%files
##    ${GITHUB_WORKSPACE}/nwchem nwchem

%post 
#!/bin/bash

echo "$(readlink /proc/$$/exe) is the shell in use"
#
#https://sylabs.io/guides/3.6/user-guide/mpi.html
export DEBIAN_FRONTEND=noninteractive
#export ompi=4.1.4
export ompi=4.1.6
export ompi_prefix=ompi-$ompi
#export ucx=1.12.1
export ucx=1.14.0
export xpmem=2.7.3
export knem=1.1.4
export OMPI_DIR=/opt/ompi
export SINGULARITY_ompi=$ompi
export SINGULARITY_ompi_prefix=ompi-$ompi
export PATH=$OMPI_DIR/bin:/root/apps/oneapi/compiler/latest/linux/bin/intel64:/root//apps/oneapi/compiler/latest/linux/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin 
export LD_LIBRARY_PATH=$OMPI_DIR/lib:/root/apps/oneapi/compiler/latest/linux/lib:/root/apps/oneapi/compiler/latest/linux/lib/x64:/root/apps/oneapi/compiler/latest/linux/compiler/lib/intel64_lin 
export LIBRARY_PATH=/root/apps/oneapi/compiler/latest/linux/compiler/lib/intel64_lin:/root/apps/oneapi/compiler/latest/linux/lib 
export SINGULARITY_PATH=$OMPI_DIR/bin:/root/apps/oneapi/compiler/latest/linux/bin/intel64:/root/apps/oneapi/compiler/latest/linux/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin 
export SINGULARITY_LD_LIBRARY_PATH=$OMPI_DIR/lib:/root/apps/oneapi/compiler/latest/linux/lib:/root/apps/oneapi/compiler/latest/linux/lib/x64:~/apps/oneapi/compiler/latest/linux/compiler/lib/intel64_lin 
export SINGULARITY_LIBRARY_PATH=/root/apps/oneapi/compiler/latest/linux/compiler/lib/intel64_lin:/root/apps/oneapi/compiler/latest/linux/lib 
export `cat ./fc.txt`
export `cat ./armci_network.txt`
export `cat ./mpi_impl.txt`
export `cat ./branch.txt`
export `cat ./myusername.txt`
echo FC is $FC
echo ARMCI_NETWORK is $ARMCI_NETWORK
echo MPI_IMPL is $MPI_IMPL
echo BRANCH is $BRANCH
pwd \
&& apt-get -y update \
&& apt-get -y install -y tzdata git moreutils  wget rsync  sudo ca-certificates \
&& wget https://github.com/moparisthebest/static-curl/releases/download/v8.1.2/curl-amd64 -O /usr/bin/curl \
&& chmod +x /usr/bin/curl \
&& echo ca_certificate=/etc/ssl/certs/ca-certificates.crt >  ~/.wgetrc \
&& echo        "cacert=/etc/ssl/certs/ca-certificates.crt" >> ~/.curlrc \
&& bash -o  pipefail -c "if [[ $(echo $FC | cut -c -8) == gfortran ]]; then apt-get -y install -y  ${FC}; fi" \
&& pwd \
&& echo '@@ ls -lart ' \
&& ls -lart  \
&& echo '@@ ls on /opt' \
&& ls -lart /opt \
&& echo " ==========" \
&& pwd \
&& echo pwd $(pwd) \
&& echo 'ls nwchem' $(ls -lrta nwchem) \
&& echo 'ls nwchem/src' $(ls -lrta nwchem/src) \
&& bash -o  pipefail -c "if [[ ! -f nwchem/src/GNUmakefile ]]; then git clone -b $BRANCH --depth 1  https://github.com/$MYUSERNAME/nwchem.git; fi " \
&& apt-get -y install -y   tar libnl-3-200 libnl-route-3-200 libgomp1 libnuma1 \
 g++ gfortran   make ssh patch   unzip perl-base file \
 python3 python3-dev cmake  unzip zip perl automake libtool autoconf flex  \
 libnuma-dev libslurm-dev libpmi2-0-dev libpmi0-dev  libnl-3-dev libnl-route-3-dev udev \
 librdmacm-dev librdmacm1 rdma-core libibverbs-dev  ibverbs-providers \
 pkg-config gawk  software-properties-common linux-headers-generic \
&& export kernelv=$(dpkg-query -W linux-headers-generic|cut -f2 ) \
&& echo kernelv is $kernelv \
&& export k1=$(dpkg-query -W linux-headers-generic|cut -f2 | cut -d "." -f 1)\
&& export k2=$(dpkg-query -W linux-headers-generic|cut -f2 | cut -d "." -f 2)\
&& export k3=$(dpkg-query -W linux-headers-generic|cut -f2 | cut -d "." -f 3)\
&& export k4=$(dpkg-query -W linux-headers-generic|cut -f2 | cut -d "." -f 4)\
&&  export ktag=$k1.$k2.$k3-$k4-generic \
&& echo ktag is $ktag \
&& ls /lib/modules/$ktag  || true

 apt-get clean 
 echo TTTTT 
 df -h 
 bash -o  pipefail -c  ./nwchem/travis/build_env.sh || true 
 echo TTTTT 
 echo "PATH" $PATH 
 echo "LD_LIBRARY_PATH" $LD_LIBRARY_PATH 
 echo FFFFF 
 echo 'FC -v ' `$FC -v` 
 echo ' CC is ' "$CC" 
 echo ' CXX is ' "$CXX" || true 
 echo 'ls -l /opt/ompi/lib/libmpi.so' $(ls -l /opt/ompi/lib/libmpi.so) || true 
 bash -o pipefail -c "if [[ ! -f /opt/ompi/lib/libmpi.so ]]; then  \
$FC -v \
&& wget --progress=dot:giga https://github.com/openucx/xpmem/archive/refs/tags/v$xpmem.tar.gz -O - |tar xzf - \
&& cd xpmem-$xpmem \
&& sh autogen.sh \
&& ./configure --prefix=$OMPI_DIR --disable-kernel-module  \
&& make -j3 \
&& make install \
&& cd .. \
&& wget https://gitlab.inria.fr/knem/knem/uploads//4a43e3eb860cda2bbd5bf5c7c04a24b6/knem-$knem.tar.gz -O - | tar xzf - \
&& cd knem-$knem \
&& echo 'ktag is $ktag' \
&& ./configure --prefix=$OMPI_DIR --with-linux-build=/lib/modules/$ktag/build --with-linux-release=$ktag \
&& make -j3 \
&& make install \
&& cd .. \
&& wget --progress=dot:giga  https://github.com/openucx/ucx/releases/download/v$ucx/ucx-$ucx.tar.gz -O - | tar xzf - \
&& cd ucx-$ucx \
&& wget https://raw.githubusercontent.com/edoapra/nwchem-singularity/master/nwchem-dev.ompi41x.ifx/ucx_malloc.patch \
&& patch -p0 < ./ucx_malloc.patch \
&& mkdir build && cd build \
&& echo 'Configuring ucx ..........' \
&& ../configure --prefix=$OMPI_DIR --disable-logging --disable-debug --disable-assertions --disable-params-check \
 --with-xpmem=$OMPI_DIR --with-knem=$OMPI_DIR  >& config.log && tail -50 config.log \
&& echo 'Checking xpmem .........' $(grep -i xpmem conf*) \
&& echo 'Checking knem ..........' $(grep -i knem conf*) \
&& echo 'Compiling ucx ..........' \
&& make -j4 >& make.log && tail -50 make.log \
&& echo 'Installing ucx ..........' \
&& make install >& makei.log && tail -50 makei.log \
&& echo 'Cleaning up ucx ..........' \
&& make clean >& makec.log \
&& cd ../.. \
&& wget --progress=dot:giga https://github.com/open-mpi/ompi/archive/v$ompi.tar.gz -O - | tar xzf -   && \
cd $ompi_prefix                                                        && \
echo './autogen.pl openmpi ..........' &&\
./autogen.pl   >& autogen.log && tail -50 autogen.log                  && \
echo 'Configuring openmpi ..........' &&\
./configure  --prefix=$OMPI_DIR --with-ucx=$OMPI_DIR --enable-mca-no-build=btl-uct   \
 --with-pmi --with-pmi-libdir=/usr/lib/x86_64-linux-gnu --enable-mpi1-compatibility --with-slurm --without-tm --without-lsf  \
 --without-sge --without-alps --without-lustre --disable-memchecker \
 --without-hcoll --disable-static  \
--disable-mpi-java --enable-dlopen --without-cuda --without-verbs \
--disable-mpi-cxx --disable-cxx-exceptions FC=$FC >& config.log && tail -50 config.log && \
echo 'Compiling openmpi ..........' &&\
make FC=$FC -j 4 >& make.log && tail -50 make.log                                  && \
echo 'Installing openmpi ..........' &&\
make -j4 install >& makei.log && tail -50 makei.log               && \
echo 'Cleaning up openmpi ..........' && \
make clean >& makec.log                                                   && \
#cd /tmp && \
#rm -rf /usr/share/doc/ && \
#rm -rf /usr/share/man/
cd .. ; rm -rf *tar*gz $ompi-prefix ucx-$ucx ;fi "
echo ' check ucx' \
&& echo ' /opt/ompi/bin/ucx_info -v ' `/opt/ompi/bin/ucx_info -v|| true` \
&& echo ' ucx Transports' `/opt/ompi/bin/ucx_info  -d |grep Transport |cut -c 19- || true` \
&& echo '********' 
export PATH=$OMPI_DIR/bin:$PATH
export LD_LIBRARY_PATH=$OMPI_DIR/lib:$LD_LIBRARY_PATH
#export ARMCI_NETWORK=MPI-PR
echo ARMCI_NETWORK is $ARMCI_NETWORK
#export NWCHEM_TOP=/opt/nwchem
export NWCHEM_TARGET=LINUX64
#dexport NWCHEM_MODULES="all python gwmol xtb"
#dexport USE_TBLITE=1 
export NWCHEM_MODULES="nwdft driver solvation"
#dif [ "$FC" = "gfortran" ]; then
#d   export BUILD_PLUMED=1
#d   export PYTHON_BIN=python3
#d   export BUILD_ELPA=1
#dfi	  
#dexport USE_LIBXC=1
export BUILD_OPENBLAS=1
export BUILD_SCALAPACK=1
export BLAS_SIZE=8
export SCALAPACK_SIZE=8
#export USE_64TO32=y
#if [ "$BRANCH" !=  "master" ]; then
   export USE_OPENMP=1
#fi
export USE_MPI=y
export USE_MPIF=y
export USE_MPIF4=y
export USE_HWOPT=n
#dexport USE_LIBXC=y
export USE_NOIO=y
#dexport USE_SIMINT=y
export SIMINT_MAXAM=5
#ENV         MRCC_METHODS=y
#ENV         CCSDTQ=y
#ENV         CCSDTLR=y
ls -l nwchem* || true \
&& /usr/bin/env|egrep BUILD_ \
&& echo " ==========" \
&& pwd \
&& echo pwd $(pwd) \
&& echo 'ls nwchem' $(ls -lrta nwchem) \
&& echo 'ls nwchem/src' $(ls -lrta nwchem/src) \
&& bash -o pipefail -c "if [[ ! -f nwchem/src/GNUmakefile ]]; then git clone -b $BRANCH --depth 1  https://github.com/$MYUSERNAME/nwchem.git; fi" \
&& cd nwchem \
&& echo "output of git describe  --always " `git describe  --always` || true \
&& wget https://raw.githubusercontent.com/edoapra/nwchem-singularity/master/nwchem-dev.ompi41x.ifx/largebasis.patch \
&& patch -p1 < largebasis.patch \
&& export NWCHEM_TOP=`pwd` \
&& echo 'ls -lrta ' $(ls -lrta) \
&& echo 'pwd ' $(pwd) \
&& cd src \
&& echo 'ls -lrta ' $(ls -lrta) \
&& echo 'pwd ' $(pwd) \
&& ls -lrt libext/lib || true \
&& make nwchem_config || { echo "config Failure"; exit 1; } \
&& bash -o pipefail -c " \
echo 'ls ~/' `ls -lrt ~/` \
&& echo '222 PATH is ' `/usr/bin/env | grep PATH` \
&& echo '111 which FC ' `which $FC` || true \
&& mpif90 -show \
&& echo FC is $FC \
&& $FC -v \
&& echo pwd is $(pwd) \
&& mkdir -p ../bin/LINUX64 \
&& gcc  config/depend.c -o ../bin/LINUX64/depend.x \
&& echo cd libext \
&& echo 'Compiling libext ..........' \
&& cd libext ; make FC=$FC ; cd .. \
&& echo 'Compiling tools ..........' \
&& cd tools  ; make FC=$FC ; cd .. \
&& make SKIP_COMPILERS=1 deps_stamp   \
&& make directories \
&& export QUICK_BUILD=1 \
&& make FC=$FC -j6 || { echo 'Compilation Failure'; exit 1; } \
&& unset QUICK_BUILD \
&& FC=$FC ../contrib/getmem.nwchem 2000  || true \
&& make FC=$FC install INSTALL_PREFIX=/opt/nwchem \
&& ldd  ../bin/LINUX64/nwchem  "\
&& if [ -f /root/apps/oneapi/compiler/latest/env/vars.sh ]; then  \
rsync -av /root/apps/oneapi/compiler/latest/linux/compiler/lib/intel64_lin/lib*.so* $OMPI_DIR/lib/. ; fi \
&&  rm -rf /root/apps/oneapi/  /opt/nwchem/src/tce /opt/nwchem/src/NWints/simint/libsimint_source/simint.l?_p?_d? \
&& DEBIAN_FRONTEND=noninteractive apt-get clean -y \
&& DEBIAN_FRONTEND=noninteractive apt-get -y install localepurge \
&& echo MANDELETE >  /etc/locale.nopurge \
&& echo DONTBOTHERNEWLOCALE >> /etc/locale.nopurge \
&& echo en_US.UTF-8 >> /etc/locale.nopurge \
&& localepurge \
&& rm -rf /usr/share/doc  /usr/share/man \
&& du -sh /opt/nwchem \
&& du -sk /opt/nwchem/*|sort -n \
&& rm -rf ../.git \
&& rm -rf tce tools nwdft NWints/simint/libsimint_source/simint.l?_p?_d? geom symmetry util nwxc ddscf lapack blas rism argos peigs rmdft gradients symmetry property smd lucia dplot propery hessian ccsd mp2_grad moints cafe analyz dimqm   develop libext/scalapack libext/openblas libext/libxc/libxc* libext/plumed* libext/libext_utils   ../lib \
&& du -sh * |sort -n \
&& cd ../.. \
&& du -sh nwchem \
&& du -sk *|sort -n  \
&& bash -o pipefail -c "if [[ $FC == 'ifx' ]] || [[ $FC  == 'ifort' ]]; then \
rm -rf ~/apps  /var/intel  l_*sh ; fi"   \
&& ls -lrth    \
&&  ldd  /opt/nwchem/bin/nwchem  \
&& du -sk *|sort -n \
&& echo "dddddddddddd"  \
&& dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 50 \
&& echo "dddddddddddd" \
&&  du -sk /tmp/* || true \
&&  ls -lart /tmp ||true \
&&  apt-get  -y purge cmake git  gcc-11  g++-11  gfortran-11  libstdc++-11-dev  libgcc-11-dev git \
&& apt-get -y install libgcc-s1 libgfortran5 \
&& apt-get -y autoremove && apt-get clean



#clean unnecessary packages

#apt-get -y purge curl wget tar  cmake  unzip zip perl automake libtool autoconf flex  \
#&&  apt-get -y autoremove && apt-get clean

#cd /data
%environment
export ompi=4.1.4
export SINGULARITY_ompi=4.1.4
export SINGULARITY_ompi_prefix=ompi-$ompi
export OMPI_DIR=/opt/ompi
export SINGULARITY_OMPI_DIR=$OMPI_DIR
export SINGULARITYENV_APPEND_PATH=$OMPI_DIR/bin
export SINGULARITYENV_APPEND_LD_LIBRARY_PATH=$OMPI_DIR/lib

export COMEX_MAX_NB_OUTSTANDING=6
export SINGULARITY_COMEX_MAX_NB_OUTSTANDING=6
#export nwchem_hash=77ba3a6e1dd6f9ba26879d0416bb93b302f1f4f7
#export NWCHEM_TOP=/opt/nwchem
export FFIELD=amber
export AMBER_1=$NWCHEM_TOP/src/data/amber_s/
export AMBER_2=$NWCHEM_TOP/src/data/amber_q/
export AMBER_3=$NWCHEM_TOP/src/data/amber_x/
export AMBER_4=$NWCHEM_TOP/src/data/amber_u/
export SPCE=${NWCHEM_TOP}/src/data/solvents/spce.rst
export CHARMM_S=$NWCHEM_TOP/src/data/charmm_s/
export CHARMM_X=$NWCHEM_TOP/src/data/charmm_x/
export PATH=$PATH:/opt/nwchem/bin/
export PATH=$OMPI_DIR/bin:$PATH
export NWCHEM_BASIS_LIBRARY=/opt/nwchem/share/libraries/
export NWCHEM_NWPW_LIBRARY=/opt/nwchem/share/libraryps/
export LD_LIBRARY_PATH=$OMPI_DIR/lib:$LD_LIBRARY_PATH
#%runscript
#exec /bin/bash "$@"
