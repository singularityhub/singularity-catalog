Bootstrap: localimage
From: ubuntu_{{ UBUNTU_VERSION }}.sif
Stage: spython-base

%arguments
   UBUNTU_VERSION=jammy

%files
    usemylibrett.patch /tmp/usemylibrett.patch
%labels
MAINTAINER  Edoardo Apra <edoardo.apra@pnnl.gov>

%setup
    #!/bin/bash
    cat usemylibrett.patch
    cp usemylibrett.patch /tmp
    echo "$(readlink /proc/$$/exe) is the shell in use"
    env|egrep SHELL
    ls -la  ${GITHUB_WORKSPACE}
    if [ -d ${GITHUB_WORKSPACE}/../../../cache ]; then export CACHEDIR=${GITHUB_WORKSPACE}/../../../cache; else  export CACHEDIR=$(pwd)/cache; fi
    rm -f ${SINGULARITY_ROOTFS}/*.txt || true
    bash -c "if [[ -z '${GPU}' ]]; then echo 'GPU=nvidia ' >> ${SINGULARITY_ROOTFS}/gpu.txt ; else echo 'GPU is ${GPU}'; echo 'GPU=${GPU} ' >> ${SINGULARITY_ROOTFS}/gpu.txt ; fi"
    bash -c "if [[ -z '${CC}' ]]; then echo 'CC=gcc ' >> ${SINGULARITY_ROOTFS}/cc.txt ; else echo 'CC is ${CC}'; echo 'CC=${CC} ' >> ${SINGULARITY_ROOTFS}/cc.txt ; fi"
    bash -c "if [[ -z '${GA_RUNTIME}' ]]; then echo 'GA_RUNTIME=MPI_PROGRESS_RANK ' >> ${SINGULARITY_ROOTFS}/ga_runtime.txt ; else echo 'GA_RUNTIME is ${GA_RUNTIME}'; echo 'GA_RUNTIME=${GA_RUNTIME} ' >> ${SINGULARITY_ROOTFS}/ga_runtime.txt ; fi"
    bash -c "if [[ -z '${MPI_IMPL}' ]]; then echo 'MPI_IMPL=mpich ' >> ${SINGULARITY_ROOTFS}/mpi_impl.txt ; else echo 'MPI_IMPL is ${MPI_IMPL}'; echo 'MPI_IMPL=${MPI_IMPL} ' >> ${SINGULARITY_ROOTFS}/mpi_impl.txt ; fi"
    bash -c "if [[ -z '${OFI}' ]]; then echo 'OFI=builtin ' >> ${SINGULARITY_ROOTFS}/OFI.txt ; else echo 'OFI is ${OFI}'; echo 'OFI=${OFI} ' >> ${SINGULARITY_ROOTFS}/ofi.txt ; fi"
    bash -c "if [[ -z '${TAMM_BRANCH}' ]]; then echo 'TAMM_BRANCH=main' >> ${SINGULARITY_ROOTFS}/tamm_branch.txt ; else echo 'TAMM_BRANCH is ${TAMM_BRANCH}'; echo 'TAMM_BRANCH=${TAMM_BRANCH} ' >> ${SINGULARITY_ROOTFS}/tamm_branch.txt ; fi"
    bash -c "if [[ -z '${EXACHEM_BRANCH}' ]]; then echo 'EXACHEM_BRANCH=main ' >> ${SINGULARITY_ROOTFS}/exachem_branch.txt ; else echo 'EXACHEM_BRANCH is ${EXACHEM_BRANCH}'; echo 'EXACHEM_BRANCH=${EXACHEM_BRANCH} ' >> ${SINGULARITY_ROOTFS}/exachem_branch.txt ; fi"
    bash -c "if [[ -z '${MPICH}' ]]; then echo 'MPICH=3.4.2 ' >> ${SINGULARITY_ROOTFS}/mpich.txt ; else echo 'MPICH is ${MPICH}'; echo 'MPICH=${MPICH} ' >> ${SINGULARITY_ROOTFS}/mpich.txt ; fi"
    bash -c "if [[ -z '${MPICH_DEVICE}' ]]; then echo 'MPICH_DEVICE=ch4:ofi ' >> ${SINGULARITY_ROOTFS}/mpich_device.txt ; else echo 'MPICH_DEVICE is ${MPICH_DEVICE}'; echo 'MPICH_DEVICE=${MPICH_DEVICE} ' >> ${SINGULARITY_ROOTFS}/mpich_device.txt ; fi"
    bash -c "if [[ -z '${SCALAPACK}' ]]; then echo 'SCALAPACK=y ' >> ${SINGULARITY_ROOTFS}/scalapack.txt ; else echo 'SCALAPACK is ${SCALAPACK}'; echo 'SCALAPACK=${SCALAPACK} ' >> ${SINGULARITY_ROOTFS}/scalapack.txt ; fi"
    bash -c "if [[ -z '${ELPA}' ]]; then echo 'ELPA=y ' >> ${SINGULARITY_ROOTFS}/elpa.txt ; else echo 'ELPA is ${ELPA}'; echo 'ELPA=${ELPA} ' >> ${SINGULARITY_ROOTFS}/elpa.txt ; fi"
    ls -lrt ${CACHEDIR} || true
    ls -la  ${CACHEDIR}/ || true
    ls -la  ${CACHEDIR}/mpich || true
    ls -la  ${CACHEDIR}/mpich/lib || true
    ls -la  ${CACHEDIR}/mpich/bin || true
    ls -la  ${CACHEDIR}/pmix || true
    ls -la  ${CACHEDIR}/libint.tar.bz2 || true
    ls -la  ${CACHEDIR}/libxc.tar.bz2 || true
    ls -la  ${CACHEDIR}/libelpa.tar.bz2 || true
    bash -c "if [[  -f ${CACHEDIR}/mpich/lib/libmpi.so ]]; then mkdir -p ${SINGULARITY_ROOTFS}/opt ;rsync -a ${CACHEDIR}/mpich ${SINGULARITY_ROOTFS}/opt/. ; echo mpich cache fetched ;fi"
    bash -c "if [[  -f ${CACHEDIR}/pmix/etc/pmix-mca-params.conf ]]; then mkdir -p ${SINGULARITY_ROOTFS}/opt ;rsync -a ${CACHEDIR}/pmix ${SINGULARITY_ROOTFS}/opt/. ; echo pmix cache fetched ;fi"
    bash -c "if [[  -f ${CACHEDIR}/libint.tar.bz2 ]]; then cd ${SINGULARITY_ROOTFS}/ ; tar xvjf ${CACHEDIR}/libint.tar.bz2; echo libint cache fetched ;fi"
    bash -c "if [[  -f ${CACHEDIR}/libxc.tar.bz2 ]]; then cd ${SINGULARITY_ROOTFS}/ ; tar xvjf ${CACHEDIR}/libxc.tar.bz2; echo libxc cache fetched ;fi"
    bash -c "if [[  -f ${CACHEDIR}/libelpa.tar.bz2 ]]; then cd ${SINGULARITY_ROOTFS}/ ; tar xvjf ${CACHEDIR}/libelpa.tar.bz2; echo libelpa cache fetched ;fi"
    ls -lrta ${SINGULARITY_ROOTFS}/opt  ||true

%post 
#!/bin	/bash

echo "$(readlink /proc/$$/exe) is the shell in use"
#
#https://sylabs.io/guides/3.6/user-guide/mpi.html
export DEBIAN_FRONTEND=noninteractive
export `cat ./mpich.txt`
export `cat ./cc.txt`
export `cat ./ga_runtime.txt`
export `cat ./mpi_impl.txt`
export `cat ./exachem_branch.txt`
export `cat ./tamm_branch.txt`
export `cat ./mpich_device.txt`
export `cat ./mpich.txt`
export `cat ./ofi.txt`
export `cat ./scalapack.txt`
export `cat ./elpa.txt`
export `cat ./gpu.txt`
export MPICH_DIR=/opt/mpich
export MPICH_AURORA="4.3.0" 
export PMIX_VERSION="4.2.9" 
echo MPICH is $MPICH
if [ $MPICH = aurora ]; then
    export MPICH_VERSION=$MPICH_AURORA
    	   else
    export MPICH_VERSION=$MPICH
fi 
export mpich_prefix=mpich-$MPICH_VERSION
echo mpich_prefix is $mpich_prefix 
export mpich_major=$(echo $MPICH_VERSION | cut -d . -f1) 
echo mpich_major is $mpich_major 
export mpich_minor=$(echo $MPICH_VERSION | cut -d . -f2) 
echo mpich_minor is $mpich_minor 
echo mpich_major is $mpich_major 
if [ $mpich_major = '4' ]; then
    export mpich_options=' '
else
    export mpich_options=' '
fi 
 if [ $MPICH = aurora ]; then
    export mpich_options=$mpich_options' --disable-maintainer-mode --with-pm=no --enable-romio --with-slurm=no --with-pmi=pmix --with-pmix=/opt/pmix '
fi 
echo 'ROCM_VERSION=0' > rocm_version.txt ;
bash -o  pipefail -c "if [[ $(echo $GPU | cut -c 1-3)  == 'amd' ]]; then echo gpus is amd;
echo 'ROCM_VERSION='`echo $GPU | cut -c 16-` > rocm_version.txt ;
echo 'GPU_ARCH='`echo $GPU | cut -c 5-10` > gpu_arch.txt ;
echo 'GPU=amd ' >  gpu.txt  ; fi"
bash -o  pipefail -c "if [[ $(echo $GPU | cut -c 1-6)  == 'nvidia' ]]; then echo gpus is nvidia;
echo 'GPU_ARCH='`echo $GPU | cut -c 8-9` > gpu_arch.txt ;
echo 'GPU=nvidia ' >  gpu.txt  ; fi"
export `cat ./gpu.txt`
export `cat ./rocm_version.txt`
export `cat ./gpu_arch.txt`
if [ ${GPU} = "nvidia" ]; then
if [ $GPU_ARCH -gt 70 ]; then export CUDA_VERSION_MAJOR=12 ; export CUDA_VERSION_MINOR=4; \
else export CUDA_VERSION_MAJOR=11 ; export CUDA_VERSION_MINOR=7 ; fi
echo CUDA $CUDA_VERSION_MAJOR $CUDA_VERSION_MINOR
fi
export ROCM_PATH=/opt/rocm-${ROCM_VERSION}
if [ ${#ROCM_VERSION} = 3 ]; then export ROCM_PATH="$ROCM_PATH".0; fi
echo ROCM_PATH is $ROCM_PATH
echo GPU is $GPU
if [ ${CC} = "icx" ]; then
    export GCC_VERSION=12
else
    export GCC_VERSION=11
fi

export PATH=$MPICH_DIR/bin:/opt/intel/oneapi/compiler/latest/bin:/usr/local/cuda-"$CUDA_VERSION_MAJOR"."$CUDA_VERSION_MINOR"/bin::/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:"$ROCM_PATH"/bin
export LD_LIBRARY_PATH=$MPICH_DIR/lib:/opt/intel/oneapi/compiler/latest/lib:/usr/local/cuda-"$CUDA_VERSION_MAJOR"."$CUDA_VERSION_MINOR"/lib64:/usr/local/lib:$MPICH_DIR/lib:"$ROCM_PATH"/lib
export LIBRARY_PATH=/opt/intel/oneapi/compiler/latest/lib
export SINGULARITY_PATH=$PATH
export SINGULARITY_LD_LIBRARY_PATH=$LD_LIBRARY_PATH

echo GPU is $GPU
echo ROCM_PATH is ${ROCM_PATH}
echo CC is $CC
echo GA_RUNTIME is $GA_RUNTIME
echo MPI_IMPL is $MPI_IMPL
 echo MPICH_DEVICE is $MPICH_DEVICE
echo EXACHEM_BRANCH is $EXACHEM_BRANCH
echo TAMM_BRANCH is $TAMM_BRANCH
if [ "$GPU" = "amd" ]; then export FC=amdflang ; export CC=amdclang; export CXX=amdclang++; \
elif [ "$CC" = "icx" ]; then export FC=ifx ; export CC=icx; export CXX=icpx; \
elif [ "$CC" = "gcc" ]; then export FC=gfortran ; export CC=$CC; export CXX=g++; \
fi \
&& echo 'FC is' "$FC"  \
&& echo ' CC is ' "$CC" \
&& echo ' CXX is ' "$CXX" \
&& echo MPICH_VERSION is $MPICH_VERSION \
&& echo OFI is $OFI\
&& cd / \
&& pwd \
&& apt-get -y update \
&& apt-get -y install -y tzdata git moreutils  wget rsync  sudo ca-certificates  \
&& wget https://github.com/moparisthebest/static-curl/releases/download/v8.1.2/curl-amd64 -O /usr/bin/curl \
&& chmod +x /usr/bin/curl \
&& echo ca_certificate=/etc/ssl/certs/ca-certificates.crt >  ~/.wgetrc \
&& echo        "cacert=/etc/ssl/certs/ca-certificates.crt" >> ~/.curlrc \
&& export CMAKE_VER=3.29.5 \
&& curl -LJO https://github.com/Kitware/CMake/releases/download/v"$CMAKE_VER"/cmake-"$CMAKE_VER"-linux-x86_64.tar.gz && tar xzf cmake-"$CMAKE_VER"-linux-x86_64.tar.gz \
&& export PATH=/cmake-"$CMAKE_VER"-linux-x86_64/bin:$PATH \
&& cmake --version \
&& pwd \
&& echo '@@ ls -lart ' \
&& ls -lart  \
&& echo '@@ ls on /opt' \
&& ls -lart /opt \
&& echo " ==========" \
&& pwd \
&& echo pwd $(pwd) \
&& apt-get -y install -y coreutils  tar libnl-3-200 libnl-route-3-200 libgomp1 libnuma1 \
 g++ gfortran   make  patch   unzip perl-base file \
 python3 python3-dev   unzip zip perl automake libtool autoconf flex  \
 libnuma-dev  libnl-3-dev libnl-route-3-dev udev \
 librdmacm-dev librdmacm1 rdma-core libibverbs-dev  ibverbs-providers \
 libhwloc-dev  lsb-release \
 pkg-config gawk  software-properties-common  gdb \
 && if [ $mpich_major = '4' ]; then
    apt-get -y install -y libpmix-bin libpmix-dev libpmix2
else
    apt-get -y install -y libpmi2-0-dev libpmi0-dev
fi \
&& export UBUNTU_CODE=$(lsb_release -c |cut -d : -f 2 | sed 's/\t//') \
&& echo UBUNTU_CODE is $UBUNTU_CODE \
&& export UBUNTU_RELEASE=$(lsb_release -r |cut -d : -f 2 | sed 's/\t//') \
&& echo UBUNTU_RELEASE is $UBUNTU_RELEASE \
&& if [ $UBUNTU_CODE = "focal" ]; then add-apt-repository -y ppa:ubuntu-toolchain-r/test && apt-get update ; fi \
            && apt-get install -q=2 -y  gcc-"$GCC_VERSION"  g++-"$GCC_VERSION" gfortran-"$GCC_VERSION" libgfortran-"$GCC_VERSION"-dev  make patch curl rsync wget git file  bzip2 tar gnupg2  \
&& update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-"$GCC_VERSION" 100 \
&& update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-"$GCC_VERSION" 100 \
&& update-alternatives --install /usr/bin/gfortran gfortran /usr/bin/gfortran-"$GCC_VERSION" 100 \
            && apt-get install  -q=2 -y  autoconf automake libtool git 
 if [ "$CC" = 'icx' ]; then
    APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1	
    TERM=dumb
    wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null 
    echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | tee /etc/apt/sources.list.d/oneAPI.list
   wget -qO - https://repositories.intel.com/gpu/intel-graphics.key |  gpg --yes --dearmor --output /usr/share/keyrings/intel-graphics.gpg
   echo "UBUNTU_VERSION is " ${UBUNTU_VERSION}
   echo "UBUNTU_CODE is " ${UBUNTU_CODE}
   echo "deb [arch=amd64 signed-by=/usr/share/keyrings/intel-graphics.gpg] https://repositories.intel.com/gpu/ubuntu "${UBUNTU_CODE}"/lts/2350 unified" | \
    tee /etc/apt/sources.list.d/intel-gpu-${UBUNTU_VERSION}.list
    apt-get update
    apt-get install -y  \
    libigc-dev intel-igc-cm libigdfcl-dev libigfxcmrt-dev level-zero-dev xpu-smi
    export ONEAPIV=2025.0
    apt-get install -y intel-oneapi-compiler-fortran-${ONEAPIV} intel-oneapi-mkl-${ONEAPIV} intel-oneapi-compiler-dpcpp-cpp-${ONEAPIV} \
  intel-oneapi-mkl-core-devel-${ONEAPIV}  intel-oneapi-mkl-sycl-devel-${ONEAPIV} \
intel-oneapi-tbb-devel intel-oneapi-umf
    ls -l /opt/intel/oneapi/mkl/latest/lib/intel64/libmkl*.a 
    export MKLROOT=/opt/intel/oneapi/mkl/latest/
    export PKG_CONFIG_PATH=${MKLROOT}/lib/pkgconfig:${PKG_CONFIG_PATH}
    export CMAKE_PREFIX_PATH=${MKLROOT}/lib/cmake:${CMAKE_PREFIX_PATH}
    export LIBRARY_PATH=${MKLROOT}/lib:${LIBRARY_PATH}
    export LD_LIBRARY_PATH=${MKLROOT}/lib:${LD_LIBRARY_PATH}
    export PATH=${MKLROOT}/bin:${PATH}
    export CPATH=${MKLROOT}/include:${CPATH}
    export TBBROOT=/opt/intel/oneapi/tbb/latest/
    export TBB_TARGET_ARCH=intel64
    export TBB_LIB_NAME=libtbb.so.12
    export TBB_LIB_DIR=intel64/gcc4.8
    export LIBRARY_PATH=/opt/intel/oneapi/tbb/latest/lib/intel64/gcc4.8:${LIBRARY_PATH}
    export LD_LIBRARY_PATH=/opt/intel/oneapi/tbb/latest/lib/intel64/gcc4.8:${LD_LIBRARY_PATH}
    export CPATH=/opt/intel/oneapi/tbb/latest/include:${CPATH}
    export CMAKE_PREFIX_PATH=/opt/intel/oneapi/tbb/latest/lib/cmake:${CMAKE_PREFIX_PATH}
    export PKG_CONFIG_PATH=/opt/intel/oneapi/tbb/latest/lib/pkgconfig:${PKG_CONFIG_PATH}

    find /opt/intel/oneapi/ -name "*cmake"
# https://github.com/intel/compute-runtime
    mkdir neo && cd neo 
    export IGCV=1.0.17537.20
    wget --progress=dot:giga https://github.com/intel/intel-graphics-compiler/releases/download/igc-${IGCV}/intel-igc-core_${IGCV}_amd64.deb
    wget --progress=dot:giga https://github.com/intel/intel-graphics-compiler/releases/download/igc-${IGCV}/intel-igc-opencl_${IGCV}_amd64.deb
    export CRTV=24.35.30872.22
    wget --progress=dot:giga https://github.com/intel/compute-runtime/releases/download/${CRTV}/intel-opencl-icd_${CRTV}_amd64.deb
    wget --progress=dot:giga https://github.com/intel/compute-runtime/releases/download/${CRTV}/libigdgmm12_22.5.0_amd64.deb
    dpkg -i *.deb && cd .. && rm -rf neo
 fi
if [ $GPU = "nvidia" ]; then  curl -LJO https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-archive-keyring.gpg ;\
 cp cuda-archive-keyring.gpg /usr/share/keyrings/cuda-archive-keyring.gpg ;\
 echo 'deb [signed-by=/usr/share/keyrings/cuda-archive-keyring.gpg] https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/ /' |  tee /etc/apt/sources.list.d/cuda-ubuntu2204-x86_64.list ;\
  curl -LJO https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin ;\
 mv cuda-*.pin /etc/apt/preferences.d/cuda-repository-pin-600 ;\
  apt-get  update ;\
apt-get  -y install cuda-nvcc-${CUDA_VERSION_MAJOR}-${CUDA_VERSION_MINOR} cuda-cudart-dev-${CUDA_VERSION_MAJOR}-${CUDA_VERSION_MINOR} cuda-libraries-${CUDA_VERSION_MAJOR}-${CUDA_VERSION_MINOR} cuda-libraries-dev-${CUDA_VERSION_MAJOR}-${CUDA_VERSION_MINOR} libcublas-dev-${CUDA_VERSION_MAJOR}-${CUDA_VERSION_MINOR} cuda-libraries-${CUDA_VERSION_MAJOR}-${CUDA_VERSION_MINOR} cuda-nvml-dev-${CUDA_VERSION_MAJOR}-${CUDA_VERSION_MINOR} ; export CUDA_PATH=/usr/local/cuda-"$CUDA_VERSION_MAJOR"."$CUDA_VERSION_MINOR"; ln -sf $CUDA_PATH/targets/x86_64-linux/lib $CUDA_PATH/targets/x86_64-linux/lib64; echo cublas $(ls -lrt $CUDA_PATH/lib64/libcublas*) ;   echo ls cudapath $(ls -lrt $CUDA_PATH ) || true; echo find libnvidia-ml $(find $CUDA_PATH -name "libnvidia-ml*") || true ;  echo cublas target $(ls -lrt $CUDA_PATH/targets/x86_64-linux/lib/libcublas*)|| true ;   fi  \
&& if [ $GPU = "amd" ]; then mkdir --parents --mode=0755 /etc/apt/keyrings \
&& wget --quiet https://repo.radeon.com/rocm/rocm.gpg.key -O - |  gpg --dearmor | tee /etc/apt/keyrings/rocm.gpg > /dev/null \
&& echo 'deb [arch=amd64 signed-by=/etc/apt/keyrings/rocm.gpg] https://repo.radeon.com/rocm/apt/'$ROCM_VERSION $UBUNTU_CODE 'main' | tee --append /etc/apt/sources.list.d/rocm.list \
&& echo  'Package: *\nPin: release o=repo.radeon.com\nPin-Priority: 600'  |  tee /etc/apt/preferences.d/rocm-pin-600 \
&& echo '$$$$ cat /etc/apt/preferences.d/rocm-pin-600 ' $(cat /etc/apt/preferences.d/rocm-pin-600) \
&& apt-get  update -y &&  apt-get -y install hip-dev hip-runtime-amd rocm-llvm rocm-device-libs rocblas-dev openmp-extras rocm-smi-lib rocminfo hipcc hipblas-dev\
&& ls -lrt /opt \
&& ls -lrt  /opt/rocm* || true \
&& echo "$GPU_ARCH" >> $ROCM_PATH/bin/target.lst \
&& echo 'rrrr' $(cat  $ROCM_PATH/bin/target.lst) \
&& echo '$$$$$$$$$$$$$$$$$$$$' \
&& echo 'rocminfo' $(rocm_agent_enumerator) \
&& echo '$$$$$$$$$$$$$$$$$$$$' \
&& echo 'hipcc --version' $(hipcc --version) \
&& echo '$$$$$$$$$$$$$$$$$$$$' \
&& echo 'hipconfig' $(hipconfig) \
&& echo '$$$$$$$$$$$$$$$$$$$$' \
&& echo ' ls -l  ROCM_PATH/lib' $(ls -l $ROCM_PATH/lib)   \
&& echo '$$$$$$$$$$$$$$$$$$$$' \
&& echo ' ls -l  ROCM_PATH/lib/libamdhip64.so*' $(ls -l $ROCM_PATH/lib/libamdhip64.so*)   \
&& echo '$$$$$$$$$$$$$$$$$$$$' ; fi \
&& echo 'FC -v ' `$FC -v`  \
&& echo 'CC -v ' `$CC -v`  \
&& echo 'CXX -v ' `$CXX -v` || { echo "CXX not installed"; exit  1; } \
&& apt-get clean  \
&& echo 'ls -l /opt/mpich/lib/libmpi.a' $(ls -l /opt/mpich/lib/libmpi.a) || true  \
&& echo FC is $FC

export MYROOT=/
if [ $FC = gfortran ]; then
    export mpich_options=$mpich_options' FFLAGS=-fallow-argument-mismatch  FCFLAGS=-fallow-argument-mismatch '
fi 
if [ ! -f /opt/mpich/lib/libmpi.a ]; then
    wget --progress=dot:giga https://github.com/Cray-HPE/xpmem/tarball/master -O xpmem.tar.gz 
    tar xzf xpmem.tar.gz 
    rm xpmem.tar.gz 
    cd Cray-HPE-xpmem* 
    sh autogen.sh 
    ./configure --prefix=$MPICH_DIR --disable-kernel-module  
    make -j3 
    make install 
    cd ..
    if [ $MPICH = aurora ]; then
        apt-get install -y libevent-dev
	wget --progress=dot:giga https://github.com/openpmix/openpmix/releases/download/v${PMIX_VERSION}/pmix-${PMIX_VERSION}.tar.gz 
	tar xzf pmix-${PMIX_VERSION}.tar.gz 
	cd pmix-${PMIX_VERSION} 
	./configure --prefix=/opt/pmix 
	make -j3 
	make -j3 install 
	cd .. 
	rm -rf pmix-*.* 
    fi 
    $FC -v 
    if [ ${MPICH_DEVICE} = ch4:ofi ]; then
	if [ ${OFI} = builtin ] ; then
	    echo 'builtin OFI - nothing to download'
	elif [ ${OFI} = git ]; then
	    export COMMIT=c3420a7402a10f5fe3f475ac5eb39b3f2837f8d1  
	    curl -L https://github.com/ofiwg/libfabric/archive/${COMMIT}.tar.gz -o libfabric-${COMMIT}.tar.gz  
	    tar xzf libfabric-${COMMIT}.tar.gz  
	    mv libfabric-${COMMIT} libfabric-git 
	    cd libfabric-git && sh autogen.sh
	    apt-get install -y libconfig-dev libsensors-dev libuv1-dev libfuse-dev libyaml-dev libjson-c-dev libcurl4-openssl-dev  
	    cd $MYROOT ; ls -lrta  
	    mkdir -p $MPICH_DIR  
	    cd $MPICH_DIR 
	    export SHSTAG=release/shs-12.0
	    CASHEA=9a8a738a879f007849fbc69be8e3487a4abf0952
	    curl -L https://github.com/HewlettPackard/shs-cassini-headers/archive/${CASHEA}.tar.gz | tar xzf -
	    mv shs-cassini-headers-* shs-cassini-headers
	    export SHSTAG=release/shs-12.0
	    curl -L https://github.com/HewlettPackard/shs-cxi-driver/archive/${SHSTAG}.tar.gz | tar xzf -
	    mv shs-cxi-driver-* shs-cxi-driver
	    cd $MYROOT
	    curl -L https://github.com/HewlettPackard/shs-libcxi/archive/${SHSTAG}.tar.gz | tar xzf -
	    mv shs-libcxi-* shs-libcxi
	    cd shs-libcxi 
	    sh autogen.sh 
	    ./configure --prefix=$MPICH_DIR 
	    make CFLAGS="-I${MPICH_DIR}/shs-cassini-headers/include/ -I${MPICH_DIR}/shs-cxi-driver/include/" pkg_CFLAGS=-Wall -i 
	    make CFLAGS="-I${MPICH_DIR}/shs-cassini-headers/include/ -I${MPICH_DIR}/shs-cxi-driver/include/" install-dist_cxi_yamlDATA install-man install-pkgconfigDATA install-pkgincludeHEADERS  install-exec  
	    export libfabric_options=" --enable-cxi=${MPICH_DIR}  --with-cassini-headers=${MPICH_DIR}/shs-cassini-headers --with-cxi-uapi-headers=${MPICH_DIR}/shs-cxi-driver "
	    echo 'libfabric_options are' $libfabric_options 
	    rm -rf shs-* 
	    cd $MYROOT ; echo 'pwd ' $(pwd) ;ls -lrta 
	else
	    wget --progress=dot:giga  https://github.com/ofiwg/libfabric/releases/download/v${OFI}/libfabric-${OFI}.tar.bz2 -O - | tar --no-same-owner  -xjf - ; export libfabric_options=' '
	fi
	if [ ${OFI} != builtin ] ; then
	    cd libfabric-${OFI} 
	    mkdir build && cd build
	    ../configure --prefix=${MPICH_DIR} $libfabric_options 
	    make -j4 && make install 
	    export mpich_options="${mpich_options} --with-libfabric=${MPICH_DIR}"
	    echo 'mpich_options are '${mpich_options}
	    if [ ! -f ${MPICH_DIR}/bin/fi_info ]; then
		echo fi_info\ not\ found
		exit 1
	    fi
	    echo 'installed libfabrics'
	fi
    elif [ ${MPICH_DEVICE} = ch4:ucx ]; then
	echo 'installing ucx' 
	export ucx=1.15.0 
	echo 'the ucx version is'  $ucx 
	wget --progress=dot:giga  https://github.com/openucx/ucx/releases/download/v$ucx/ucx-$ucx.tar.gz 
	tar xzf ucx-$ucx.tar.gz && rm ucx-$ucx.tar.gz  
	cd ucx-$ucx 
	wget https://raw.githubusercontent.com/edoapra/nwchem-singularity/master/nwchem-dev.ompi41x.ifx/ucx_malloc.patch 
	patch -p0 < ./ucx_malloc.patch
	mkdir -p build && cd build 
	../configure --prefix=${MPICH_DIR} --disable-logging --disable-debug --disable-assertions --disable-params-check 
	make -j4 && make install 
	if [ ! -f ${MPICH_DIR}/bin/ucx_info ]; then echo ucx_info\ not\ found ; exit 1 ; fi
	export mpich_options=$mpich_options" --with-ucx="${MPICH_DIR}
    fi
    cd ../..  
    echo ' mpich_options is set to' $mpich_options 
    if [ ${MPICH_VERSION} = main ]; then
	git clone -b main https://github.com/pmodels/mpich.git mpich-main 
	cd mpich-main 
	mpich_hash=49bb9c1b3dd4cc54e5567e7ee47800d666f1c3c0
	git reset --hard $mpich_hash 
	git submodule update --init 
	sh autogen.sh 
	cd ..
    else
	wget  --progress=dot:giga https://www.mpich.org/static/downloads/${MPICH_VERSION}/mpich-${MPICH_VERSION}.tar.gz  -O - | tar xzf -  
    fi 
    cd $mpich_prefix    
    if [ $mpich_major = '3' ]; then
	echo 'mpich 3 autotools ' 
	mv autogen.sh autogen.sh.org 
	wget https://raw.githubusercontent.com/edoapra/exachem-container-images/main/apptainer.mpich/autogen.sh 
	chmod +x autogen.sh 
	wget https://raw.githubusercontent.com/edoapra/exachem-container-images/main/apptainer.mpich/install-autotools.sh
	chmod +x install-autotools.sh 
	wget https://github.com/pmodels/mpich/commit/3d351d49a07b401a35cb0e9b76fb077edca64eb9.patch 
	patch -p1 < 3d351d49a07b401a35cb0e9b76fb077edca64eb9.patch 
	cd maint/patches/optional/confdb && rm -f flang.patch &&  wget https://raw.githubusercontent.com/edoapra/exachem-container-images/main/apptainer.mpich/flang.patch ; cd ../../../../  ; pwd 
	sh ./autogen.sh 
    fi
    ./configure  --prefix=${MPICH_DIR} \
    $mpich_options \
    --with-device=${MPICH_DEVICE}  \
    --enable-fortran=all  \
    --disable-opencl --enable-silent-rules  \
    --without-cuda  \
    --without-ze  \
    --without-hip  \
    --with-xpmem=${MPICH_DIR}
    FC=$FC CC=$CC CXX=$CXX 
    head config.log 
    tail -300 config.log 
    echo 'checkcheckechk******' 
    grep -i psm2 Makefile ||true 
    grep -i infinipat Makefile ||true 
    echo 'checkcheckechk******' 
    make FC=$FC -j 6
    make install
    if [ ! -f $MPICH_DIR/bin/mpif90 ]; then echo mpif90\ not\ found ; exit 1 ; fi
    echo mpif90 show is $($MPICH_DIR/bin/mpif90 -show) 
    cd .. ; rm -rf *tar*gz mpich-*
fi


 if [ ! -f $MPICH_DIR/bin/mpif90 ]; then echo mpif90\ not\ found ; exit 1 ; fi \
&& echo '********' \
&& export PATH=$MPICH_DIR/bin:$PATH \
&& export PATH=/opt/intel/oneapi/compiler/latest/bin:$PATH \
&& export LD_LIBRARY_PATH=$MPICH_DIR/lib:$LD_LIBRARY_PATH \
&& export PATH=$PATH:/usr/local/cuda-"$CUDA_VERSION_MAJOR"."$CUDA_VERSION_MINOR"/bin \
&& export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-"$CUDA_VERSION_MAJOR"."$CUDA_VERSION_MINOR"/lib64 \
&& export PATH=$PATH:"$ROCM_PATH"/bin \
&& export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:"$ROCM_PATH"/lib \
&& export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/install/exachem/lib \
&& export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/install/exachem/lib/exachem/ \
&& export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/install/exachem/lib/tamm/ \
&& which mpicc \
&& wget https://raw.githubusercontent.com/pmodels/mpich/refs/heads/main/examples/cpi.c \
&& mpicc cpi.c -o cpi.x \
&& echo 'first cpi.x run' \
&& ./cpi.x < /dev/null \
&& sed -i 's/final_cflags=\" \"/final_cflags=\" -Wno-implicit-function-declarations \"/' /opt/mpich/bin/mpicc \
&& if [ $(command -v mpicc) ]; then echo mpicc present; else echo mpicc missing; exit 1; fi  \
&& echo "which mpicc is" $(which mpicc)  \
&& echo "mpicc -show is " $(mpicc -show)  || { tail -700 $mpich_prefix/config.log ;echo "mpi compilation failed"; exit 1; } \
&& echo 'second cpi.x run' \
&& rm -f cpi.x \
&& mpicc cpi.c -o cpi.x \
&& ./cpi.x < /dev/null \
&& wget --progress=dot:giga https://raw.githubusercontent.com/edoapra/exachem-container-images/main/apptainer.mpich/autoconf-2.71.tar.xz && tar -xf autoconf-2.71.tar.xz \
&& cd autoconf-2.71/ && ./configure --prefix=/usr && make -j3 && make -j3 install \
&& echo autoconf $(autoconf --version) \
&& echo GA_RUNTIME is $GA_RUNTIME  \
&& 	     echo TAMM_BRANCH is ${TAMM_BRANCH}   \
&& 	     echo 'cloning tamm source *** ' || true   \
&&            cd /opt || { echo "Failure"; exit 1; }  \
&&              git clone -b ${EXACHEM_BRANCH} --depth 100  https://github.com/ExaChem/exachem.git exachem    \
&&              git clone -b ${TAMM_BRANCH} --depth 100 https://github.com/NWChemEx/TAMM.git   \
&& 	     cd TAMM   \
&& 	     mkdir build && cd build  \
&&              CMAKE_OPTIONS="-DCMAKE_INSTALL_PREFIX=/opt/install/exachem -DMODULES='CC' "  \
&&              CMAKE_OPTIONS="$CMAKE_OPTIONS -DDFT_CPU=ON " \
&&           if [ ${CC} = "icx" ]; then echo "intel compilers "; CMAKE_OPTIONS="$CMAKE_OPTIONS -DGCCROOT=/usr" ;     CMAKE_OPTIONS="$CMAKE_OPTIONS -DLINALG_VENDOR=IntelMKL  -DLINALG_PREFIX=${MKLROOT} " ;  \
else 	     CMAKE_OPTIONS="$CMAKE_OPTIONS -DBLIS_CONFIG=zen3 -DMARCH_FLAGS=-march=znver3" ; fi \
&&              if [ ${GPU} = "intel_gpu_pvc" ]; then echo "intel_gpu_pvc "; CMAKE_OPTIONS="$CMAKE_OPTIONS  -DUSE_OPENMP=OFF -DTAMM_ENABLE_DPCPP=ON " ; fi \
&&              if [ ${GPU} = "nvidia" ]; then echo "nvidia gpu "; CMAKE_OPTIONS="$CMAKE_OPTIONS -DTAMM_ENABLE_CUDA=ON -DGPU_ARCH=${GPU_ARCH}" ; fi  \
&&              if [ ${GPU} = "amd" ]; then echo "amd gpu "; CMAKE_OPTIONS="$CMAKE_OPTIONS -DTAMM_ENABLE_HIP=ON -DROCM_ROOT=$ROCM_PATH -DGPU_ARCH=${GPU_ARCH} -DGCCROOT=/usr " ; ls -lrt $ROCM_PATH/include/rocblas/rocblas.h $ROCM_PATH/include/ ; ln -sf $ROCM_PATH/include/rocblas/rocblas.h $ROCM_PATH/include/rocblas.h; fi  \
&&             export USE_SCALAPACK=OFF \
&&              if [ ${SCALAPACK} = "y" ]; then echo "SCALAPACK ON"; CMAKE_OPTIONS="$CMAKE_OPTIONS -DUSE_SCALAPACK=ON "; export USE_SCALAPACK=ON; fi   \
&&              if [ \( ${CC} = "gcc" \) -a \(  ${ELPA} = "y" \) ]; then echo "ELPA ON"; CMAKE_OPTIONS="$CMAKE_OPTIONS -DTAMM_ENABLE_ELPA=ON " ; fi  \
&&              if [ \( ${CC} = "amdclang" \) -a \( ${SCALAPACK} = "y" \) ]; then echo "scalapack workaround for clang "; CMAKE_OPTIONS="$CMAKE_OPTIONS -DCMAKE_C_FLAGS_INIT='-Wno-error=implicit-function-declaration' 	" ; fi  \
&&              CMAKE_OPTIONS="$CMAKE_OPTIONS -DGA_RUNTIME=${GA_RUNTIME}"  \
&&              echo "modify ga repository to use" \
&&              CMAKE_OPTIONS="$CMAKE_OPTIONS -DGA_REPO='https://github.com/GlobalArrays/ga.git' -DGA_TAG='develop'"    \
&&              export CMAKE_OPTIONS   \
&& 	     echo CMAKE_OPTIONS $CMAKE_OPTIONS  \
&& 	     echo USE_SCALAPACK is set to $USE_SCALAPACK  \
&& if [ ${GPU} = "intel_gpu_pvc" ]; then  cmake  $CMAKE_OPTIONS  -DTAMM_CXX_FLAGS=" -mtune=sapphirerapids -ffast-math -fsycl -fsycl-device-code-split=per_kernel -fsycl-targets=intel_gpu_pvc -sycl-std=2020" .. || { echo "Cmake pvc failure";  exit 1; } ; \
echo "modify Librett  repository to use"  ; \
cat _deps/cmakebuild-src/cmake/build_external/BuildLibrett.cmake ; \
 patch -p0 < /tmp/usemylibrett.patch ; \
else 	     USE_SCALAPACK="$USE_SCALAPACK" CC="$CC" CXX="$CXX" FC="$FC" cmake  $CMAKE_OPTIONS .. || { echo "Cmake failure"; exit 1; } ; fi \
&&             make -j3 || { echo "Compilation failure in tamm step";
               echo cublas $(ls -lrt $CUDA_PATH/lib64/libcublas*) || true ;  echo cublas target $(ls -lrt $CUDA_PATH/targets/x86_64-linux/lib64/libcublas*) ||true ;  echo ls cudapath $(ls -lrt $CUDA_PATH ) || true;  \
	    cat $(find /opt/TAMM/ -name config.log) || true ; \
	    cat $(find /opt/TAMM/ -name CMakeCache.txt) || true ; \
	    cat $(find /opt/TAMM/ -name CMakeOutput.log) || true ; \
            cat $(find /opt/TAMM/ -name CMakeError.log ) || true; exit 1; } \
&& 	     echo exit code for TAMM compilation $?   \
&&              make install   \
&& 	     echo exit code for TAMM make install $?   \
&&              cd /opt/exachem   \
&& 	     mkdir build && cd build   \
&& 	     echo ' === ls -l /opt/install/exachem ===' $(ls -l /opt/install/exachem)   \
&& 	     echo ' === ls -l /opt/install/exachem/lib ===' $(ls -l /opt/install/exachem/lib)   \
&&	     if [ -f /opt/install/exachem/include/libint2.h ]; then echo 'found libint cache' ; \
             mkdir -p /opt/exachem/build/stage/opt || true ; \
	     rsync -av /opt/install /opt/exachem/build/stage/opt/. ; fi \
&&             export CMAKE_OPTIONS  \
&&	     echo CMAKE_OPTIONS $CMAKE_OPTIONS  \
&& if [ ${GPU} = "intel_gpu_pvc" ]; then  cmake  $CMAKE_OPTIONS  -DTAMM_CXX_FLAGS=" -mtune=sapphirerapids -ffast-math -fsycl -fsycl-device-code-split=per_kernel -fsycl-targets=intel_gpu_pvc -sycl-std=2020" .. || { echo "Cmake pvc failure"; exit 1; } ; \
else     CC="$CC" CXX="$CXX" FC="$FC" cmake  $CMAKE_OPTIONS .. || { echo "Cmake failure"; exit 1; }  ; fi\
&&             make V=1 VERBOSE=1 -j3 || { echo "Compilation failure"; exit 1; }  \
&&	     echo exit code for compilation $?  \
&&             make install  \
&&            cp EXACHEM_Methods_External-prefix/src/EXACHEM_Methods_External-build/libcmsb_gpulib_ExaChem.so  /opt/install/exachem/lib/exachem/. \
&&	     echo exit code for make install $?  \
&&	     bash -c "if [[ -f /opt/install/exachem/bin/ExaChem ]]; then echo 'Exachem binary created' ; else  echo 'compilation error1'; exit 1; fi"  \
&&	     echo git describe --always `git describe --always`  >> /opt/install/info.txt \
	    && echo git rev-parse HEAD git `git rev-parse HEAD` >> /opt/install/info.txt \
            && echo 'clean unnecessary source to reduce docker size' \
            && rm  -rf /opt/exachem \
            && rm  -rf /opt/TAMM \
	    && cd /opt/install/exachem/share/libint/2.9.0/basis/ \
	    && wget --progress=dot:giga -O aug-cc-pvdz.g94 "https://www.basissetexchange.org/download_basis/basis/aug-cc-pvdz/format/gaussian94/?version=1&elements=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36&optimize_general=true&uncontract_general=true" \
	    && wget --progress=dot:giga -O aug-cc-pvtz.g94 "https://www.basissetexchange.org/download_basis/basis/aug-cc-pvtz/format/gaussian94/?version=1&elements=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36&optimize_general=true&uncontract_general=true" \
	    && wget --progress=dot:giga -O aug-cc-pvqz.g94 "https://www.basissetexchange.org/download_basis/basis/aug-cc-pvqz/format/gaussian94/?version=1&elements=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36&optimize_general=true&uncontract_general=true" \
            && echo 'clean unnecessary packages ' \
            && DEBIAN_FRONTEND=noninteractive apt-get -q=2 -y install localepurge \
	    && echo MANDELETE >  /etc/locale.nopurge \
	    && echo DONTBOTHERNEWLOCALE >> /etc/locale.nopurge \
	    && echo en_US.UTF-8 >> /etc/locale.nopurge \
	    && localepurge \
	    && rm -rf /usr/share/doc \
            &&  apt-get -q=2 -y purge   patch curl  wget  make git cpp-"$GCC_VERSION" gfortran-"$GCC_VERSION" gcc-"$GCC_VERSION" libicu-dev libpython"$PY_VERSION"-dev libstdc++-"$GCC_VERSION"-dev libc6-dev libgcc-"$GCC_VERSION"-dev libgfortran-"$GCC_VERSION"-dev  || true \
            && apt-get -q=2 -y install libgfortran5 libgomp1 && apt-get clean \
	    && if [ "$GPU" = nvidia ]; then apt-get purge -y cuda-cccl-"$CUDA_VERSION_MAJOR"-"$CUDA_VERSION_MINOR" libcublas-dev-"$CUDA_VERSION_MAJOR"-"$CUDA_VERSION_MINOR" ; fi\
	    && if [ "$GPU" = "amd" ]; then  apt-get  purge -y   git-man openmp-extras \
	    lib32gcc-11-dev  libc6-dev-i386 libx32gcc-11-dev libc6-dev-x32 lib32gcc-11-dev  \
	    lib32asan6 lib32atomic1 lib32gcc-s1 lib32gomp1 lib32itm1 lib32quadmath0 lib32stdc++6 lib32ubsan1 libc6-i386 \
	    libc6-x32 libx32asan6 libx32atomic1 libx32gcc-s1 libx32gomp1 libx32itm1 libx32quadmath0 libx32stdc++6 libx32ubsan1 \
	    javascript-common less liberror-perl libjs-jquery libjs-sphinxdoc libjs-underscore libltdl-dev libltdl7 libpython3.10  ; \
	    apt-get install -y hip-runtime-amd rocblas openmp-extras-runtime rocm-smi-lib;  \
	    cd $ROCM_PATH/lib/rocblas/ ; mkdir keep ; mv library/*"$GPU_ARCH"* keep/.  ; \
	    rm -rf library ; mv keep library ; \
	    ln -sf "$ROCM_PATH"/ /opt/rocm ;\
	    rm  -f "$ROCM_PATH"/bin/rocm-smi ; ln -sf "$ROCM_PATH"/libexec/rocm_smi/rocm_smi.py "$ROCM_PATH"/bin/rocm-smi ; \
	    rm -rf "$ROCM_PATH"/lib/hipblaslt || true ; \
	    rm -rf   "$ROCM_PATH"/llvm/bin  ; fi\
	    && echo '*** ls -l CC/bin **' \
	    && ls -l /opt/install/exachem/bin/ || true \
	    && echo '*** ldd ***'  \
	    &&  ldd /opt/install/exachem/bin/ExaChem || true \
&& DEBIAN_FRONTEND=noninteractive apt-get clean -y \
&& DEBIAN_FRONTEND=noninteractive apt-get -y install localepurge \
&& echo MANDELETE >  /etc/locale.nopurge \
&& echo DONTBOTHERNEWLOCALE >> /etc/locale.nopurge \
&& echo en_US.UTF-8 >> /etc/locale.nopurge \
&& localepurge \
&& rm -rf /usr/share/doc  /usr/share/man \
&& du -sk /opt/*|sort -n \
&& echo "dddddddddddd"  \
&& dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 50 \
&& echo "dddddddddddd" \
&&  du -sk /tmp/* || true \
&&  ls -lart /tmp ||true \
&& ls -Rlart  /opt/install/exachem || true \
&& ls -lart  /opt/install/exachem/include || true \
&& ls -lart  /opt/install/exachem || true 

#&&  apt-get  -y purge  git  gcc-11  g++-11  gfortran-11  libstdc++-11-dev  libgcc-11-dev git \
#&& apt-get -y install libgcc-s1 libgfortran5 \
#&& apt-get -y autoremove && apt-get clean




#cd /data
%environment
export MPICH_DIR=/opt/mpich
export SINGULARITY_MPICH_DIR=$MPICH_DIR
export CUDA_VERSION_MAJOR=11 
export CUDA_VERSION_MINOR=7
if [ -f /rocm_version.txt ]; then  export `cat /rocm_version.txt` ; fi
export PATH=/opt/rocm/bin:$PATH
export LD_LIBRARY_PATH=/opt/rocm/lib:$LD_LIBRARY_PATH
export PATH=/usr/local/cuda-"$CUDA_VERSION_MAJOR"."$CUDA_VERSION_MINOR"/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/cuda-"$CUDA_VERSION_MAJOR"."$CUDA_VERSION_MINOR"/lib64:/usr/local/lib:$MPICH_DIR/lib:$ROCM_PATH/lib:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=/opt/intel/oneapi/compiler/latest/lib:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=/opt/intel/oneapi/umf/latest/lib:/opt/intel/oneapi/tbb/latest/lib/intel64/gcc4.8:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=/opt/install/exachem/lib/exachem/:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=/opt/install/exachem/lib/:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=/opt/install/exachem/lib/tamm/:$LD_LIBRARY_PATH
export PATH=/opt/install/exachem/bin:$MPICH_DIR/bin:$PATH
export PATH=$PATH:/opt/intel/oneapi/compiler/latest/bin
export LD_LIBRARY_PATH=$MPICH_DIR/lib:/usr/local/lib:$LD_LIBRARY_PATH
export COMEX_MAX_NB_OUTSTANDING=12
#export APPTAINERENV_COMEX_MAX_NB_OUTSTANDING=12
#%runscript
#exec /bin/bash "$@"

