Bootstrap: docker
From: fedora:40

%environment
    export INSTALLDIR=/opt/lofar
    . $INSTALLDIR/init.sh

%arguments
        HAS_CUDA=true
        HAS_MKL=true
        MARCH=sandybridge
        MTUNE=sandybridge
        NOAVX512=true
        DEBUG=false
        OPENBLASTARGET=SANDYBRIDGE

%post
    # General environment settings.
    export J=`nproc`
    export INSTALLDIR=/opt/lofar
    export PYTHON_VERSION=3.12

    # Settings relevant to the installed software.
    export AOFLAGGER_VERSION=bdf03b28
    export CASACORE_VERSION=v3.6.1
    export DDFPIPELINE_VERSION=df58808
    export DP3_VERSION=48e75b34
    export DYSCO_VERSION=682fe5
    export EVERYBEAM_VERSION=65685cba
    export HDF5_VERSION=1.14.5
    export IDG_VERSION=2af6f285
    export LAPACK_VERSION=3.8.0
    export LOSOTO_VERSION=latest
    export OPENBLAS_VERSION=v0.3.29
    export PYBDSF_VERSION=8471637
    export PYTHON_CASACORE_VERSION=3.6.1
    export RMEXTRACT_VERSION=0.5.0
    export WSCLEAN_VERSION=443bd576
    export HDF5_USE_FILE_LOCKING=FALSE
    export OMPI_ALLOW_RUN_AS_ROOT=1

    export HAS_CUDA={{ HAS_CUDA }}
    export HAS_MKL={{ HAS_MKL }}
    export MARCH={{ MARCH }}
    export MTUNE={{ MTUNE }}
    export NOAVX512={{ NOAVX512 }}
    export DEBUG={{ DEBUG }}

    export CPPSTD=c++17
    export OMP_NUM_THREADS=1
    export OMP_MAX_THREADS=1
    export OPENBLAS_NUM_THREADS=1
    export MKL_NUM_THREADS=1
    export NUM_THREADS=256
    export OPENBLAS_TARGET={{ OPENBLASTARGET }}

    if [ $NOAVX512 = true ]; then
        export CFLAGS="-w -march=${MARCH} -mtune=${MTUNE} -mno-avx512f"
        export CXXFLAGS="-w -march=${MARCH} -mtune=${MTUNE} -std=${CPPSTD} -mno-avx512f"
    else
        export CFLAGS="-w -march=${MARCH} -mtune=${MTUNE}"
        export CXXFLAGS="-w -march=${MARCH} -mtune=${MTUNE} -std=${CPPSTD}"
    fi
    if [ $DEBUG = true ]; then
        export CFLAGS="-g $CFLAGS"
        export CXXFLAGS="-g $CXXFLAGS"
        export CMAKE_ADD_OPTION="-LA"
    else
        export CMAKE_ADD_OPTION="-Wno-dev"
    fi
    export CPLUS_INCLUDE_PATH="/opt/hdf5/include:/opt/OpenBLAS/include:/usr/include/openmpi-x86_64:/usr/include/c++/14:/usr/include/python${PYTHON_VERSION}:$INSTALLDIR/casacore/include:/usr/include/boost:/usr/include/cfitsio:$INSTALLDIR/idg/include:$INSTALLDIR/EveryBeam/include:/usr/include/wcslib:/usr/include/freetype2/freetype:/usr/include/freetype2/freetype/config"
    export CPATH="/usr/include/python${PYTHON_VERSION}:/opt/hdf5/include:/opt/OpenBLAS/include:/usr/include/openmpi-x86_64/:/usr/local/cuda/include:${INSTALLDIR}/casacore/include:$INSTALLDIR/idg/include:$INSTALLDIR/aoflagger/include:$INSTALLDIR/EveryBeam/include:/usr/include/wcslib:/usr/include/freetype2/freetype/config"
    export CMAKE_PREFIX_PATH="/opt/hdf5:/opt/OpenBLAS:$INSTALLDIR/aoflagger:$INSTALLDIR/casacore:$INSTALLDIR/lofar:$INSTALLDIR/idg:/usr/lib64/openmpi:$INSTALLDIR/EveryBeam"
    export LD_LIBRARY_PATH="/opt/hdf5/lib:$INSTALLDIR/lofarstman/lib64:/opt/OpenBLAS/lib64:$INSTALLDIR/aoflagger/lib:$INSTALLDIR/casacore/lib:$INSTALLDIR/idg/lib:/usr/lib64/openmpi/lib/:$INSTALLDIR/EveryBeam/lib:$INSTALLDIR/sagecal/lib:$LD_LIBRARY_PATH"
    export PATH="/opt/hdf5/bin:/usr/lib64/openmpi/bin:$PATH"

    mkdir -p $INSTALLDIR

    #
    # System installs
    #
    dnf -y update
    dnf -y install https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
    dnf -y install wget
    wget https://raw.githubusercontent.com/tikk3r/flocs/fedora-py3/dnf-packages.txt -O $INSTALLDIR/dnf-packages.txt
    dnf -y install $(</opt/lofar/dnf-packages.txt)
    wget --progress=bar:force:noscroll https://download.oracle.com/otn_software/linux/instantclient/2360000/oracle-instantclient-basic-23.6.0.24.10-1.el9.x86_64.rpm
    dnf -y install oracle-instantclient-basic-23.6.0.24.10-1.el9.x86_64.rpm
    rm oracle-instantclient-basic-*.rpm
    # Necessary for nomacs
    sudo strip --remove-section=.note.ABI-tag /usr/lib64/libQt5Core.so.5

    export make=`which make`
    export cmake=`which cmake`
    export CC=`which gcc`
    export CXX=`which g++`

    mkdir -p $INSTALLDIR/patches
    cd $INSTALLDIR && git clone --single-branch -b fedora-py3 https://github.com/tikk3r/flocs.git
    mv $INSTALLDIR/flocs/patches/* $INSTALLDIR/patches/
    
    # Install OpenBLAS
    mkdir -p /opt/OpenBLAS
    cd /opt/OpenBLAS
    git clone https://github.com/xianyi/OpenBLAS.git src
    cd src && git checkout $OPENBLAS_VERSION
    mkdir build && cd build
    cmake $CMAKE_ADD_OPTION -DCMAKE_INSTALL_PREFIX=/opt/OpenBLAS -DTARGET=$OPENBLAS_TARGET -DUSE_THREAD=1 -DNUM_THREADS=$NUM_THREADS -DNUM_CORES=$NUM_THREADS -DBUILD_SHARED_LIBS=ON -DNO_AVX512=$NOAVX512 ..
    make -j$J
    make install
    rm -rf /opt/OpenBLAS/src

    if [ $DEBUG = true ]; then
        dnf -y install gdb valgrind mc
        debuginfo-install -y libstdc++
    fi

    #
    # Install HDF5 with parallel support
    #
    export CC=`which mpicc`
    export CXX=`which mpic++`
    mkdir /opt/hdf5
    cd /opt/hdf5
    export HDF5_VERSION_USCORE=${HDF5_VERSION//./_}
    wget --progress=bar:force:noscroll https://support.hdfgroup.org/releases/hdf5/v${HDF5_VERSION_USCORE%_*}/v${HDF5_VERSION_USCORE}/downloads/hdf5-${HDF5_VERSION}.tar.gz
    gunzip hdf5-${HDF5_VERSION}.tar.gz
    tar xf hdf5-${HDF5_VERSION}.tar
    cd hdf5-${HDF5_VERSION}/
    # Thread safety required for WSClean's parallel gridding with facets.
    ./configure -prefix=/opt/hdf5 --enable-build-mode=production --enable-threadsafe --enable-shared --disable-sharedlib-rpath --disable-hl --enable-cxx -enable-unsupported
    make -j $J
    #make check
    make install
    cd /opt/hdf5
    rm -r hdf5-1.*
    export CC=`which gcc`
    export CXX=`which g++`
    export HDF5_DIR=/opt/hdf5

    if [ $HAS_MKL = true ]; then
        #
        # Install Intel MKL
        #
tee > /tmp/oneAPI.repo << EOF
[oneAPI]
name=IntelÂ® oneAPI repository
baseurl=https://yum.repos.intel.com/oneapi
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://yum.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
EOF
        sudo mv /tmp/oneAPI.repo /etc/yum.repos.d/
        dnf -y install intel-oneapi-mkl intel-oneapi-mkl-devel
    fi

    if [ $HAS_CUDA = true ]; then
        #
        # Install CUDA 12.6
        #
        sudo dnf -y config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/fedora39/x86_64/cuda-fedora39.repo
        sudo dnf -y clean all
        sudo dnf -y install cuda-12-6
        export CUDA_HOME=/usr/local/cuda
        export PATH=$CUDA_HOME/bin:$PATH
    fi

    flexiblas add OPENBLAS /opt/OpenBLAS/lib64/libopenblas.so
    flexiblas64 add OPENBLAS /opt/OpenBLAS/lib64/libopenblas.so
    export FLEXIBLAS=OPENBLAS
    export FLEXIBLAS64=OPENBLAS
    if [ $DEBUG = true ]; then
        flexiblas print
    fi

    # MultiNest
    cd $INSTALLDIR
    git clone https://github.com/JohannesBuchner/MultiNest
    cd MultiNest/build
    cmake $CMAKE_ADD_OPTION -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/MultiNest ..
    make
    cd $INSTALLDIR

    #
    # Setup the Python environment.
    #
    sudo dnf -y install python3-cx-oracle
    wget https://raw.githubusercontent.com/tikk3r/flocs/fedora-py3/requirements.txt -O $INSTALLDIR/requirements.txt
    pip --version
    pip install --upgrade setuptools
    pip --no-cache-dir install virtualenv

    virtualenv $INSTALLDIR/pyenv-py3 --python=python3
    # Without this strange bash errors appear with singularity shell from apptainer with 1.1.6-1.el8.
    printf "unset \$PROMPT_COMMAND\n$(cat $INSTALLDIR/pyenv-py3/bin/activate)" > $INSTALLDIR/pyenv-py3/bin/activate
    source $INSTALLDIR/pyenv-py3/bin/activate
    if [ $HAS_MKL = true ]; then
        source /opt/intel/oneapi/mkl/latest/env/vars.sh
    fi

    wget --progress=bar:force:noscroll https://github.com/blaze/datashape/archive/refs/tags/0.5.2.tar.gz
    tar -xzvf 0.5.2.tar.gz
    rm 0.5.2.tar.gz
    cd datashape-0.5.2/
    sed -i 's/SafeConfigParser/ConfigParser/g' versioneer.py
    sed -i 's/readfp/read_file/g' versioneer.py
    pip install .
    cd ..
    rm -rf datashape-0.5.2/

    pip install --upgrade pip wheel Cython
    pip install "numpy<2"
    pip install --no-binary pandas pandas
    pip install --no-binary h5py h5py
    pip install -r $INSTALLDIR/requirements.txt
    # Install this separately since it keeps forcefully downgrading numpy.
    pip install --no-deps lofarSun
    pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu

    #
    # Install LTA client
    #
    cd $INSTALLDIR
    wget --progress=bar:force:noscroll https://lta.lofar.eu/software/lofar_lta-2.8.0.tar.gz
    tar xf lofar_lta-*
    cd lofar_lta-2.8.0
    #python setup.py install_oracle
    pip install .
    cd ..
    rm lofar_lta*.tar.gz
    rm -rf lofar_lta-2.8.0/

    #
    # Install Montage
    #
    #mkdir -p /opt/montage
    #cd /opt/montage
    #wget --progress=bar:force:noscroll https://github.com/Caltech-IPAC/Montage/archive/v6.0.tar.gz -O Montage_v6.0.tar.gz
    #tar xf Montage_v6.0.tar.gz
    #cd Montage-6.0
    #make -j $J
    #rm -rf /opt/montage/Montage_v6.0.tar.gz
    

    #
    # Install difmap
    #
    mkdir -p $INSTALLDIR/difmap
    cd $INSTALLDIR/difmap
    #wget --progress=bar:force:noscroll ftp://ftp.astro.caltech.edu/pub/difmap/difmap2.5e.tar.gz
    wget --progress=bar:force:noscroll https://github.com/tikk3r/flocs/blob/master/misc/difmap2.5e.tar.gz?raw=true -O difmap2.5e.tar.gz
    tar xf difmap2.5e.tar.gz
    cd uvf_difmap
    wget https://raw.githubusercontent.com/nealjackson/loop3_difmap/master/corplt.c -O difmap_src/corplt.c

    sed -i.bak -e '97d' configure
    sed -i.bak -e '97 i PGPLOT_LIB=/usr/lib64/libpgplot.so.5' configure
    ./configure linux-i486-gcc
    export PGPLOT_LIB=/usr/lib64/libpgplot.so.5
    export OLD_CFLAGS=$CFLAGS
    export CFLAGS="-L/usr/lib64/libpgplot.so.5"
    CC=`which gcc` ./makeall
    rm -rf $INSTALLDIR/difmap/*.tar.gz
    export CFLAGS=$OLD_CFLAGS

    #
    # Install PyBDSF
    #
    mkdir -p ${INSTALLDIR}/pybdsf
    cd ${INSTALLDIR}/pybdsf && git clone https://github.com/lofar-astron/pybdsf && cd ${INSTALLDIR}/pybdsf/pybdsf && git checkout ${PYBDSF_VERSION} && echo export PYBDSF_VERSION=$(git rev-parse --short HEAD) >> $INSTALLDIR/init.sh
    cd ${INSTALLDIR}/pybdsf/pybdsf
    pip install .
    cd $INSTALLDIR
    rm -rf $INSTALLDIR/pybdsf/pybdsf

    #
    # Install CASAcore
    #
    mkdir -p ${INSTALLDIR}/casacore/build
    mkdir -p ${INSTALLDIR}/casacore/data
    cd $INSTALLDIR/casacore
    git clone https://github.com/casacore/casacore.git src
    cd ${INSTALLDIR}/casacore/src && git checkout tags/${CASACORE_VERSION} && echo export CASACORE_VERSION=$(git rev-parse --short HEAD) >> $INSTALLDIR/init.sh
    cd ${INSTALLDIR}/casacore/data
    ncftpget ftp://anonymous@ftp.astron.nl/outgoing/Measures/WSRT_Measures.ztar
    tar xf WSRT_Measures.ztar && rm WSRT_Measures.ztar
    cd ${INSTALLDIR}/casacore/build
    cmake $CMAKE_ADD_OPTION \
        -DCMAKE_INSTALL_PREFIX=${INSTALLDIR}/casacore/ \
        -DDATA_DIR=${INSTALLDIR}/casacore/data \
        -DBUILD_PYTHON=False \
        -DUSE_OPENMP=True \
        -DUSE_HDF5=True \
        -DBUILD_PYTHON3=True \
        -DBUILD_DYSCO=OFF \
        -DBLAS_LIBRARIES=/opt/OpenBLAS/lib64/libopenblas.so \
        ../src/ 
    cd ${INSTALLDIR}/casacore/build && make -s -j ${J}
    cd ${INSTALLDIR}/casacore/build && make install
    cd $INSTALLDIR
    rm -rf $INSTALLDIR/casacore/build
    rm -rf $INSTALLDIR/casacore/src

    #
    # Install Python-CASAcore
    #
    # In case anything was installed previously
    pip uninstall -y python-casacore
    pip install --no-deps --no-binary python-casacore "python-casacore==${PYTHON_CASACORE_VERSION}"
    
    #
    # Install Dysco
    #
    mkdir -p $INSTALLDIR/dysco/build
    cd $INSTALLDIR/dysco && git clone https://github.com/aroffringa/dysco.git src
    cd src && git checkout $DYSCO_VERSION && echo export DYSCO_VERSION=$(git rev-parse --short HEAD) >> $INSTALLDIR/init.sh
    if [ $MARCH = 'x86-64' ] && [ $MTUNE = 'generic' ]; then
        cd $INSTALLDIR/dysco/build && cmake $CMAKE_ADD_OPTION -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/dysco -DCASACORE_ROOT_DIR=$INSTALLDIR/casacore -DPORTABLE=True ../src && make -s -j $J && make install
    else
        cd $INSTALLDIR/dysco/build && cmake $CMAKE_ADD_OPTION -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/dysco -DCASACORE_ROOT_DIR=$INSTALLDIR/casacore -DTARGET_CPU=$MARCH -DPORTABLE=False ../src && make -s -j $J && make install
    fi
    cd $INSTALLDIR
    rm -rf $INSTALLDIR/dysco/build
    rm -rf $INSTALLDIR/dysco/src

    #
    # Install SAGECal
    #
    mkdir -p $INSTALLDIR/sagecal/build
    cd $INSTALLDIR/sagecal
    git clone https://github.com/nlesc-dirac/sagecal.git src
    cd build
    if [ $HAS_MKL = true ]; then
        cmake $CMAKE_ADD_OPTION -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/sagecal \
            -DLIB_ONLY=True \
            -DBLA_VENDOR=Intel10_64lp \
            ../src
    else
        cmake $CMAKE_ADD_OPTION -DOpenBLAS_LIB=/opt/OpenBLAS/lib64/libopenblas.so \
            -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/sagecal \
            -DLIB_ONLY=True \
            ../src
    fi
    make -j $j
    make install
    rm -rf $INSTALLDIR/sagecal/build
    rm -rf $INSTALLDIR/sagecal/src

    #
    # Install AOFlagger
    #
    mkdir -p ${INSTALLDIR}/aoflagger/build
    cd ${INSTALLDIR}/aoflagger && git clone https://gitlab.com/aroffringa/aoflagger.git src && cd ${INSTALLDIR}/aoflagger/src && git checkout ${AOFLAGGER_VERSION} && echo export AOFLAGGER_VERSION=$(git rev-parse --short HEAD) >> $INSTALLDIR/init.sh
    if [ $MARCH = 'x86-64' ] && [ $MTUNE = 'generic' ] && [ $HAS_MKL = true ]; then
        cd ${INSTALLDIR}/aoflagger/build && cmake $CMAKE_ADD_OPTION -DCMAKE_INSTALL_PREFIX=${INSTALLDIR}/aoflagger/ -DCASACORE_ROOT_DIR=${INSTALLDIR}/casacore \
            -DBUILD_SHARED_LIBS=ON -DPORTABLE=True -DBLAS_iomp5_LIBRARY=${MKLROOT}/lib/libiomp5.so ../src
    elif [ $MARCH = 'x86-64' ] && [ $MTUNE = 'generic' ] && [ $HAS_MKL = false ]; then
        cd ${INSTALLDIR}/aoflagger/build && cmake $CMAKE_ADD_OPTION -DCMAKE_INSTALL_PREFIX=${INSTALLDIR}/aoflagger/ -DCASACORE_ROOT_DIR=${INSTALLDIR}/casacore \
            -DBUILD_SHARED_LIBS=ON -DPORTABLE=True ../src
    elif [ $HAS_MKL = true ]; then
        cd ${INSTALLDIR}/aoflagger/build && cmake $CMAKE_ADD_OPTION -DCMAKE_INSTALL_PREFIX=${INSTALLDIR}/aoflagger/ -DCASACORE_ROOT_DIR=${INSTALLDIR}/casacore \
            -DBUILD_SHARED_LIBS=ON -DTARGET_CPU=$MARCH -DPORTABLE=False -DBLAS_iomp5_LIBRARY=${MKLROOT}/lib/libiomp5.so ../src
    else
        cd ${INSTALLDIR}/aoflagger/build && cmake $CMAKE_ADD_OPTION -DCMAKE_INSTALL_PREFIX=${INSTALLDIR}/aoflagger/ -DCASACORE_ROOT_DIR=${INSTALLDIR}/casacore \
            -DBUILD_SHARED_LIBS=ON -DTARGET_CPU=$MARCH -DPORTABLE=False ../src
    fi
    cd ${INSTALLDIR}/aoflagger/build && make -s -j ${J}
    cd ${INSTALLDIR}/aoflagger/build && make install
    cd $INSTALLDIR
    rm -rf $INSTALLDIR/aoflagger/aoflagger
    rm -rf $INSTALLDIR/aoflagger/build
    rm -rf $INSTALLDIR/aoflagger/src

    #
    # Install LofarStMan
    #
    mkdir -p $INSTALLDIR/lofarstman
    cd $INSTALLDIR/lofarstman
    git clone https://github.com/lofar-astron/LofarStMan.git
    cd LofarStMan
    mkdir build && cd build
    cmake $CMAKE_ADD_OPTION -DCASACORE_ROOT_DIR=$INSTALLDIR/casacore -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/lofarstman ..
    make -j$J
    make install
    cd $INSTALLDIR
    rm -rf $INSTALLDIR/lofarstman/LofarStMan

    #
    # Install EveryBeam library
    #
    echo Installing EveryBeam
    mkdir -p $INSTALLDIR/EveryBeam/build
    cd $INSTALLDIR/EveryBeam
    git clone https://git.astron.nl/RD/EveryBeam.git src
    cd src && git checkout $EVERYBEAM_VERSION
    echo export EVERYBEAM_VERSION=$(git rev-parse --short HEAD) >> $INSTALLDIR/init.sh
    cd $INSTALLDIR/EveryBeam/build
    cmake -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/EveryBeam -DBUILD_WITH_PYTHON=ON -DTARGET_CPU=$MARCH ../src
    make -j $J
    make install
    cd $INSTALLDIR/
    rm -rf $INSTALLDIR/EveryBeam/src/

    #   
    # Install Image Domain Gridder (IDG)
    #   
    mkdir -p $INSTALLDIR/idg && cd $INSTALLDIR/idg
    git clone https://git.astron.nl/RD/idg.git src
    cd src && git checkout $IDG_VERSION && echo export IDG_VERSION=$(git rev-parse --short HEAD) >> $INSTALLDIR/init.sh && mkdir build && cd build
    sed -i '1i #include <array>' $INSTALLDIR/idg/src/idg-lib/src/Hybrid/CUDA/GenericOptimized/routines/Imaging.cpp
    sed -i '1i #include <array>' $INSTALLDIR/idg/src/idg-lib/src/CUDA/common/routines/Beam.cpp
    sed -i '1i #include <array>' $INSTALLDIR/idg/src/idg-lib/src/CUDA/Generic/routines/Imaging.cpp
    # This needs debugging, buid without MKL regardless for now.
    if [ $HAS_CUDA = true ] && [ $HAS_MKL = true ]; then
        cmake $CMAKE_ADD_OPTION -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/idg -DBUILD_WITH_MKL=OFF -DMKL_INCLUDE_DIRS=/opt/intel/oneapi/mkl/latest/include/ -DBUILD_LIB_CUDA=ON -DCMAKE_BUILD_TYPE=Release -DTARGET_CPU=$MARCH ..
    elif [ $HAS_CUDA = false ] && [ $HAS_MKL = true ]; then
        cmake $CMAKE_ADD_OPTION -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/idg -DBUILD_WITH_MKL=OFF -DMKL_INCLUDE_DIRS=/opt/intel/oneapi/mkl/latest/include/ -DCMAKE_BUILD_TYPE=Release -DTARGET_CPU=$MARCH ..
    elif [ $HAS_CUDA = true ] && [ $HAS_MKL = false ]; then
        cmake $CMAKE_ADD_OPTION -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/idg -DBUILD_WITH_MKL=OFF -DBUILD_LIB_CUDA=ON -DCMAKE_BUILD_TYPE=Release -DTARGET_CPU=$MARCH ..
    else
        cmake $CMAKE_ADD_OPTION -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/idg -DBUILD_WITH_MKL=OFF -DBUILD_LIB_CUDA=OFF -DTARGET_CPU=$MARCH -DCMAKE_BUILD_TYPE=Release ..
    fi
    make -j $J
    make install
    cd $INSTALLDIR
    rm -rf $INSTALLDIR/idg/src

    #
    # Install DP3
    #
    mkdir -p $INSTALLDIR/DP3/build
    git clone https://git.astron.nl/RD/DP3.git $INSTALLDIR/DP3/src
    cd $INSTALLDIR/DP3/src
    git checkout ${DP3_VERSION}
    echo export DP3_VERSION=$(git rev-parse --short HEAD) >> $INSTALLDIR/init.sh
    cd $INSTALLDIR/DP3/build
    if [ $MARCH = 'x86-64' ] && [ $MTUNE = 'generic' ]; then
        cmake $CMAKE_ADD_OPTION -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLDIR/DP3 -DIDGAPI_LIBRARIES=$INSTALLDIR/idg/lib/libidg-api.so -DIDGAPI_INCLUDE_DIRS=$INSTALLDIR/idg/include -DAOFLAGGER_INCLUDE_DIR=$INSTALLDIR/aoflagger/include -DAOFLAGGER_LIB=$INSTALLDIR/aoflagger/lib/libaoflagger.so -DPORTABLE=True -DLIBDIRAC_PREFIX=$INSTALLDIR/sagecal/ ../src
    else
        cmake $CMAKE_ADD_OPTION -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLDIR/DP3 -DIDGAPI_LIBRARIES=$INSTALLDIR/idg/lib/libidg-api.so -DIDGAPI_INCLUDE_DIRS=$INSTALLDIR/idg/include -DAOFLAGGER_INCLUDE_DIR=$INSTALLDIR/aoflagger/include -DAOFLAGGER_LIB=$INSTALLDIR/aoflagger/lib/libaoflagger.so -DTARGET_CPU=${MARCH} -DLIBDIRAC_PREFIX=$INSTALLDIR/sagecal/ ../src
    fi
    # Boost 1.75 requires c++14, so override this during make
    make -s -j $J && make install
    cd $INSTALLDIR
    rm -rf $INSTALLDIR/DP3/build
    rm -rf $INSTALLDIR/DP3/src
    mkdir $INSTALLDIR/DP3/usermodules
    wget https://raw.githubusercontent.com/jurjen93/lofar_helpers/master/dp3_helpers/polconv.py -O $INSTALLDIR/DP3/usermodules/polconv.py

    #
    # Install LoSiTo
    #
    pip install --no-deps git+https://github.com/darafferty/losito.git

    #
    # Install LoSoTo
    #
    mkdir -p $INSTALLDIR/losoto/build
    cd $INSTALLDIR/losoto/build
    git clone https://github.com/revoltek/losoto.git src
    cd src
    # Some fixes for certain LoSoTo versions until it is fixed upstream.
    find . -type f -name '*.py' -exec sed -i 's/np\.float16(weights)/weights.astype(float)/' {} \;
    find . -type f -name '*.py' -exec sed -i 's/np\.float16/float/g' {} \;
    find . -type f -name '*.py' -exec sed -i 's/Float16Atom/FloatAtom/g' {} \;
    pip install --no-deps .
    cd $INSTALLDIR
    rm -rf $INSTALLDIR/losoto

    #
    # Install WSClean
    #
    mkdir $INSTALLDIR/wsclean
    cd ${INSTALLDIR}/wsclean && git clone https://gitlab.com/aroffringa/wsclean.git && cd wsclean && git checkout $WSCLEAN_VERSION && echo export WSCLEAN_VERSION=$(git rev-parse --short HEAD) >> $INSTALLDIR/init.sh
    cd ${INSTALLDIR}/wsclean/wsclean
    mkdir build && cd build
    # Switch to mpicc for a minute
    export CC=`which mpicc`
    export CXX=`which mpic++`
    # TARGET_CPU is a WSClean 2.10.2 feature. Change to PORTABLE=TRUE if using and older version to avoid -march=native being triggered.
    if [ $MARCH = 'x86-64' ] && [ $MTUNE = 'generic' ]; then
        cmake $CMAKE_ADD_OPTION -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/wsclean -DPORTABLE=True ..
    elif [ $MARCH = 'x86-64' ] && [ $MTUNE = 'generic' ] && [ $HAS_MKL = true ]; then
        cmake $CMAKE_ADD_OPTION -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/wsclean -DPORTABLE=True -DBLAS_iomp5_LIBRARY=${MKLROOT}/lib/libiomp5.so ..
    elif [ $HAS_MKL = true ]; then
        cmake $CMAKE_ADD_OPTION -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/wsclean -DTARGET_CPU=${MARCH} -DBLAS_iomp5_LIBRARY=${MKLROOT}/lib/libiomp5.so ..
    else
        cmake $CMAKE_ADD_OPTION -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/wsclean -DTARGET_CPU=${MARCH} ..
    fi
    make -j ${J}
    make install
    cd $INSTALLDIR
    rm -rf $INSTALLDIR/wsclean/wsclean
    # Switch back to normal compilers
    export CC=`which gcc`
    export CXX=`which g++`

    #
    # Install DS9
    #
    mkdir -p $INSTALLDIR/ds9/bin
    cd $INSTALLDIR/ds9
    wget --progress=bar:force:noscroll https://ds9.si.edu/download/fedora38x86/ds9.fedora38x86.8.6.tar.gz
    tar xf ds9*.tar.gz -C $INSTALLDIR/ds9/bin
    rm ds9*.tar.gz

    echo "Installation directory contents:"
    ls ${INSTALLDIR}
    
    # Setup DDF
    export PATCH_KILLMS_MAKEFILE_PREDICT=$INSTALLDIR/patches/killms_predict.patch
    export PATCH_KILLMS_MAKEFILE_ARRAY=$INSTALLDIR/patches/killms_array.patch
    export PATCH_KILLMS_MAKEFILE_GRIDDER=$INSTALLDIR/patches/killms_gridder.patch
    export PATCH_DDFACET_CPUS=$INSTALLDIR/patches/DDFacet_cpus.patch

    pip --no-cache-dir install meqtrees-cattery --no-deps
    pip --no-cache-dir install owlcat --no-deps

    #
    # Install the standalone StationResponse libraries. DDFacet still uses these.
    #   
    echo Installing LOFARBeam...
    mkdir -p $INSTALLDIR/LOFARBeam/build
    cd $INSTALLDIR/LOFARBeam
    git clone https://github.com/lofar-astron/LOFARBeam.git src
    cd src
    echo export LOFARBEAM_VERSION=$(git rev-parse --short HEAD) >> $INSTALLDIR/init.sh
    cd ../build
    # Install in the existing lofar python folder
    mkdir -p /opt/lofar/lofar/lib64/python${PYTHON_VERSION}/site-packages/lofar/
    touch /opt/lofar/lofar/lib64/python${PYTHON_VERSION}/site-packages/lofar/__init__.py
    if [ $HAS_MKL = true ]; then
        cmake $CMAKE_ADD_OPTION -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/lofar -DBLAS_iomp5_LIBRARY=${MKLROOT}/lib/libiomp5.so ../src
    else
        cmake $CMAKE_ADD_OPTION -DCMAKE_INSTALL_PREFIX=$INSTALLDIR/lofar ../src
    fi
    make -j $J
    make install
    cd $INSTALLDIR
    rm -rf $INSTALLDIR/LOFARBeam/build
    rm -rf $INSTALLDIR/LOFARBeam/src

    #
    # Install DDFacet
    #
    export CFLAGS="$CFLAGS -Wno-error=incompatible-pointer-types"
    export CXXFLAGS="$CXXFLAGS -Wno-error=incompatible-pointer-types"
    cd $INSTALLDIR
    git clone https://github.com/saopicc/DDFacet.git
    cd DDFacet
    git checkout 5cec4db8 
    cd ..
    ## Strip out version requirements.
    sed -i 's/<=.*"/"/' DDFacet/pyproject.toml
    # sed doesn't support negative lookahead, so we use perl here.
    grep -rl "np.bool" DDFacet | xargs perl -pi -e 's/np\.bool(?![0-9a-zA-Z])/np\.bool_/'

    sed -i "s/npzfile\.iteritems/npzfile\.items/" DDFacet/DDFacet/Imager/ClassFacetMachine.py
    sed -i "s/3\.11/3.13/g" DDFacet/pyproject.toml
    sed -i 's/DATA\["Weights"\]!=1/DATA\["Weights"\] is not 1/' DDFacet/DDFacet/Data/ClassVisServer.py

    find DDFacet/ -name "*.c" -exec sed -i "s/PyArray_FLOAT64/NPY_FLOAT64/g" {} \;
    find DDFacet/ -name "*.c" -exec sed -i "s/PyArray_COMPLEX64/NPY_COMPLEX64/g" {} \;
    find DDFacet/ -name "*.c" -exec sed -i "s/PyArray_INT32/NPY_INT32/g" {} \;
    find DDFacet/ -name "*.c" -exec sed -i "s/PyArray_FLOAT32/NPY_FLOAT32/g" {} \;

    pip install --no-deps DDFacet/


    #
    # Install killMS
    #
    cd $INSTALLDIR
    git clone --single-branch -b v3.2.0 https://github.com/saopicc/killMS.git
    sed -i 's/<=.*"/"/' killMS/pyproject.toml
    sed -i "s/3\.11/3.13/g" killMS/pyproject.toml
    find killMS/ -name "*.c" -exec sed -i "s/PyArray_FLOAT64/NPY_FLOAT64/g" {} \;
    find killMS/ -name "*.c" -exec sed -i "s/PyArray_COMPLEX64/NPY_COMPLEX64/g" {} \;
    find killMS/ -name "*.c" -exec sed -i "s/PyArray_INT32/NPY_INT32/g" {} \;
    find killMS/ -name "*.c" -exec sed -i "s/PyArray_FLOAT32/NPY_FLOAT32/g" {} \;

    grep -rl "np.float" killMS | xargs perl -pi -e 's/np\.float(?![0-9a-zA-Z])/np\.float_/g'
    grep -rl "np.int" killMS | xargs perl -pi -e 's/np\.int(?![0-9a-zA-Z])/np\.int_/g'

    sed -i "s/gcc/gcc -march=${MARCH} -mtune=${MTUNE}/" killMS/killMS/Predict/Makefile
    sed -i "s/gcc/gcc -march=${MARCH} -mtune=${MTUNE}/" killMS/killMS/Array/Dot/Makefile
    sed -i "s/gcc/gcc -march=${MARCH} -mtune=${MTUNE}/" killMS/killMS/Gridder/Makefile
    pip install --no-deps killMS/


    #   
    # Install DynSpecMS
    #   
    cd $INSTALLDIR && git clone https://github.com/cyriltasse/DynSpecMS.git
    cd $INSTALLDIR/DynSpecMS && git checkout ApplyBeam

    #
    # Install ddf-pipeline
    #
    rm -rf $INSTALLDIR/ddf-pipeline
    cd $INSTALLDIR && git clone https://github.com/mhardcastle/ddf-pipeline.git
    cd ddf-pipeline && git checkout $DDFPIPELINE_VERSION && cd ..
    cd $INSTALLDIR
    sed -i "s/DDF.py/DDF.py --Misc-IgnoreDeprecationMarking=1/" $INSTALLDIR/ddf-pipeline/scripts/pipeline.py
    sed -i "s/--Beam-PhasedArrayMode/--Beam-LOFARBeamMode/g" $INSTALLDIR/ddf-pipeline/scripts/pipeline.py
    sed -i "s/--PhasedArrayMode/--LOFARBeamMode/g" $INSTALLDIR/ddf-pipeline/scripts/pipeline.py
    sed -i "s/pybdsm\.srl\.fits/pybdsf\.srl\.fits/g" $INSTALLDIR/ddf-pipeline/scripts/pipeline.py
    sed -i "s/pybdsm\.srl\.fits/pybdsf\.srl\.fits/g" $INSTALLDIR/ddf-pipeline/scripts/bootstrap.py
    sed -i '353s/readonly=True/readonly=False/' $INSTALLDIR/ddf-pipeline/utils/auxcodes.py
    mkdir $INSTALLDIR/DDFCatalogues
    cd $INSTALLDIR/DDFCatalogues
    wget --progress=bar:force:noscroll https://www.extragalactic.info/bootstrap/VLSS.fits
    wget --progress=bar:force:noscroll https://www.extragalactic.info/bootstrap/wenss.fits
    wget --progress=bar:force:noscroll https://www.extragalactic.info/bootstrap/B2.fits
    wget --progress=bar:force:noscroll https://www.extragalactic.info/bootstrap/NVSS.fits
    #wget --progress=bar:force:noscroll https://lambda.gsfc.nasa.gov/data/foregrounds/tgss_adr/TGSSADR1_7sigma_catalog.fits
    wget --progress=bar:force:noscroll http://tgssadr.strw.leidenuniv.nl/catalogs/TGSSADR1_7sigma_catalog.fits
    cd $INSTALLDIR
    rm /opt/lofar/ddf-pipeline/scripts/sub-sources-outside-region.py
    ln -s `which sub-sources-outside-region` /opt/lofar/ddf-pipeline/scripts/sub-sources-outside-region.py

    sed -i 's/SafeConfigParser/ConfigParser/g' /opt/lofar/ddf-pipeline/utils/options.py

    #
    # Install lotss-query
    #
    cd $INSTALLDIR
    git clone https://github.com/mhardcastle/lotss-query.git

    #
    # Install lotss-hba-survey
    #
    cd $INSTALLDIR
    git clone https://github.com/mhardcastle/lotss-hba-survey.git

    #
    # Install LINC
    #
    cd $INSTALLDIR
    git clone https://git.astron.nl/RD/LINC.git


    # Install VLBI-cwl
    cd $INSTALLDIR
    git clone https://git.astron.nl/RD/VLBI-cwl.git

    #
    # Install custom runners
    #
    mkdir -p /opt/lofar/runners
    cd /opt/lofar/
    cp flocs/runners/run* ./runners/
    cp -r flocs/utility /opt/lofar/
    rm -rf flocs
    chmod 755 /opt/lofar/runners/*.sh
    chmod 755 /opt/lofar/utility/*.sh
    cd $INSTALLDIR

    #
    # Finaly cleanup of unnecessary stuff
    # 
    rm -rf /var/cache/dnf/*
    rm -rf /var/cache/yum/*
    rm -rf /var/log/*
    dnf -y clean all
    
    #
    # init-lofar
    #
    ln -s $INSTALLDIR/pyenv-py3/bin/h5plot /usr/bin/h5plot

    # Store version information.
    echo export LOSOTO_VERSION=$LOSOTO_VERSION >> $INSTALLDIR/init.sh
    echo export OPENBLAS_VERSION=$OPENBLAS_VERSION >> $INSTALLDIR/init.sh
    echo export RMEXTRACT_VERSION=$RMEXTRACT_VERSION >> $INSTALLDIR/init.sh
    echo export HDF5_USE_FILE_LOCKING=$HDF5_USE_FILE_LOCKING >> $INSTALLDIR/init.sh

    echo export MARCH=$MARCH >> $INSTALLDIR/init.sh
    echo export MTUNE=$MTUNE >> $INSTALLDIR/init.sh
    echo $'export MARCH_MACHINE=$(gcc -march=native -Q --help=target | grep "\-march=" | head -n 1 | awk \'{print $2}\')' >> $INSTALLDIR/init.sh
    echo $'export MTUNE_MACHINE=$(gcc -mtune=native -Q --help=target | grep "\-mtune=" | head -n 1 | awk \'{print $2}\')' >> $INSTALLDIR/init.sh
    echo $'if [ "$MARCH_MACHINE" != "$MARCH" ]; then echo "WARNING - software has been build with -march=$MARCH but current machine reports -march=$MARCH_MACHINE.\nIf you encounter strange behaviour or Illegal instruction warnings, consider building a container with the appropriate architecture set."; fi' >> $INSTALLDIR/init.sh
    echo $'if [ "$MTUNE_MACHINE" != "$MTUNE" ]; then echo "WARNING - software has been build with -mtune=$MTUNE but current machine -mtune=$MTUNE_MACHINE.\nIf you encounter strange behaviour or Illegal instruction warnings, consider building a container with the appropriate architecture set."; fi' >> $INSTALLDIR/init.sh
    echo export INSTALLDIR=$INSTALLDIR >> $INSTALLDIR/init.sh
    echo export PYTHONPATH=\$INSTALLDIR/VLBI-cwl/scripts:\$INSTALLDIR/LINC/scripts:\$INSTALLDIR/lofar/lib64/python$PYTHON_VERSION/site-packages:\$INSTALLDIR/DP3/lib/python$PYTHON_VERSION/site-packages:\$INSTALLDIR/DP3/usermodules:\$INSTALLDIR/EveryBeam/lib64/python$PYTHON_VERSION/site-packages:\$PYTHONPATH >> $INSTALLDIR/init.sh
    echo export PYTHONPATH=\$INSTALLDIR/aoflagger/lib:\$PYTHONPATH >> $INSTALLDIR/init.sh
    # echo export PATH=/opt/montage/Montage-6.0/bin:\$PATH  >> $INSTALLDIR/init.sh
    echo export PATH=\$INSTALLDIR/aoflagger/bin:\$PATH  >> $INSTALLDIR/init.sh
    echo export PATH=\$INSTALLDIR/casacore/bin:\$PATH  >> $INSTALLDIR/init.sh
    echo export PATH=\$INSTALLDIR/ds9/bin:\$PATH >> $INSTALLDIR/init.sh
    echo export PATH=\$INSTALLDIR/DP3/bin:\$PATH  >> $INSTALLDIR/init.sh
    echo export PATH=\$INSTALLDIR/difmap/uvf_difmap:\$PATH >> $INSTALLDIR/init.sh
    echo export PATH=\$INSTALLDIR/dysco/bin:\$PATH  >> $INSTALLDIR/init.sh
    echo export PATH=/opt/hdf5/bin:\$PATH  >> $INSTALLDIR/init.sh
    echo export PATH=\$INSTALLDIR/sagecal/bin:\$PATH  >> $INSTALLDIR/init.sh
    echo export PATH=\$INSTALLDIR/wsclean/bin:\$PATH  >> $INSTALLDIR/init.sh
    echo export PATH=\$INSTALLDIR/runners:\$PATH >> $INSTALLDIR/init.sh
    echo export PATH=\$INSTALLDIR/LINC/scripts:\$PATH >> $INSTALLDIR/init.sh
    echo export PATH=\$INSTALLDIR/utility:\$PATH >> $INSTALLDIR/init.sh
    echo export PATH=\$INSTALLDIR/MultiNest/bin:\$PATH >> $INSTALLDIR/init.sh
    echo export PATH=/usr/lib64/openmpi/bin:\$PATH >> $INSTALLDIR/init.sh
    echo export PATH=\$INSTALLDIR/VLBI-cwl/scripts:\$PATH >> $INSTALLDIR/init.sh
    echo export LD_LIBRARY_PATH=\$INSTALLDIR/aoflagger/lib:\$INSTALLDIR/casacore/lib:\$INSTALLDIR/DP3/lib:\$INSTALLDIR/dysco/lib:\$INSTALLDIR/EveryBeam/lib:/opt/hdf5/lib:\$INSTALLDIR/idg/lib:\$INSTALLDIR/lofar/lib:\$INSTALLDIR/lofar/lib64:\$LD_LIBRARY_PATH  >> $INSTALLDIR/init.sh
    echo export LD_LIBRARY_PATH=/opt/OpenBLAS/lib64:\$LD_LIBRARY_PATH >> $INSTALLDIR/init.sh
    echo export LD_LIBRARY_PATH=/usr/lib64/openmpi/lib/:\$LD_LIBRARY_PATH >> $INSTALLDIR/init.sh
    echo export LD_LIBRARY_PATH=\$INSTALLDIR/sagecal/lib:\$LD_LIBRARY_PATH >> $INSTALLDIR/init.sh
    echo export LD_LIBRARY_PATH=\$INSTALLDIR/lofarstman/lib64/:\$LD_LIBRARY_PATH >> $INSTALLDIR/init.sh
    echo export LD_LIBRARY_PATH=\$INSTALLDIR/MultiNest/lib/:\$LD_LIBRARY_PATH >> $INSTALLDIR/init.sh
    # OPENBLAS_NUM_THREADS=1 is required for WSClean
    echo export NCPU=\$\(nproc\) >> $INSTALLDIR/init.sh
    echo export OPENBLAS_NUM_THREADS=1 >> $INSTALLDIR/init.sh
    echo export OPENBLAS_MAX_THREADS=\$NCPU >> $INSTALLDIR/init.sh
    echo export OMP_NUM_THREADS=\$NCPU >> $INSTALLDIR/init.sh
    echo export OMP_MAX_THREADS=\$NCPU >> $INSTALLDIR/init.sh
    echo export HAS_CUDA=$HAS_CUDA >> $INSTALLDIR/init.sh
    if [ $HAS_CUDA = true ]; then
        echo export CUDA_HOME=/usr/local/cuda >> $INSTALLDIR/init.sh
        echo export PATH=\$CUDA_HOME/bin:\$PATH >> $INSTALLDIR/init.sh
        echo export LD_LIBRARY_PATH=\$CUDA_HOME/lib64:\$LD_LIBRARY_PATH >> $INSTALLDIR/init.sh
    fi
    echo export HAS_MKL=$HAS_MKL >> $INSTALLDIR/init.sh
    echo flexiblas add OPENBLAS /opt/OpenBLAS/lib64/libopenblas.so >> $INSTALLDIR/init.sh
    echo flexiblas64 add OPENBLAS /opt/OpenBLAS/lib64/libopenblas.so >> $INSTALLDIR/init.sh
    echo export FLEXIBLAS=OPENBLAS >> $INSTALLDIR/init.sh
    echo export FLEXIBLAS64=OPENBLAS >> $INSTALLDIR/init.sh
    # Needed for shadems
    echo export NUMBA_CACHE_DIR=/tmp >> $INSTALLDIR/init.sh

    echo export EVERYBEAM_DATADIR=\$INSTALLDIR/EveryBeam/share/everybeam >> $INSTALLDIR/init.sh
    echo export LINC_DATA_ROOT=/opt/lofar/LINC >> $INSTALLDIR/init.sh
    echo export HDF5_DIR=/opt/hdf5 >> $INSTALLDIR/init.sh

    echo . \$INSTALLDIR/pyenv-py3/bin/activate >> $INSTALLDIR/init.sh
    # For some reason this doesn't work.
    # echo . /opt/intel/oneapi/mkl/latest/env/vars.sh >> $INSTALLDIR/init.sh

    echo "measures.directory: $INSTALLDIR/casacore/data" > $INSTALLDIR/.casarc 
    echo export CASARCFILES=\$INSTALLDIR/.casarc >> $INSTALLDIR/init.sh
    if [ $HAS_MKL = true ]; then
        echo export MKLROOT=$MKLROOT >> $INSTALLDIR/init.sh
        echo export PATH=\$MKLROOT/bin:\$PATH >> $INSTALLDIR/init.sh
        echo export LD_LIBRARY_PATH=\$MKLROOT/lib:\$LD_LIBRARY_PATH >> $INSTALLDIR/init.sh
    fi


    echo "# DDF environment settings" >> $INSTALLDIR/init.sh
    echo export DDF_DIR=$INSTALLDIR >> $INSTALLDIR/init.sh
    echo export DDF_PIPELINE_CATALOGS=$INSTALLDIR/DDFCatalogues >> $INSTALLDIR/init.sh
    echo export KILLMS_DIR=$INSTALLDIR >> $INSTALLDIR/init.sh
    echo export PATH=\$INSTALLDIR/killMS/killMS:\$PATH >> $INSTALLDIR/init.sh
    echo export PYTHONPATH=\$INSTALLDIR/lotss-hba-survey:\$INSTALLDIR/lotss-query:\$INSTALLDIR/ddf-pipeline/scripts:$INSTALLDIR/ddf-pipeline/utils:$INSTALLDIR/DDFacet/DDFacet:$INSTALLDIR/DynSpecMS:\$PYTHONPATH >> $INSTALLDIR/init.sh
    echo export PATH=$INSTALLDIR/DDFacet/SkyModel:\$INSTALLDIR/DynSpecMS/:\$INSTALLDIR/ddf-pipeline/scripts:\$PATH >> $INSTALLDIR/init.sh
    echo "if echo \$(hostname) | grep -qi leiden; then export DDF_PIPELINE_CLUSTER="paracluster"; else export DDF_PIPELINE_CLUSTER=; fi" >> $INSTALLDIR/init.sh

%help
    This Apptainer (formerly Singularity) image contains a variety of LOFAR software. In order to run your pipelines, you may need to know where the software is installed. The root directory is /opt/lofar, with most software installed as follows:

    * AOFlagger: $INSTALLDIR/aoflagger
    * Casacore: $INSTALLDIR/casacore
    * Difmap: $INSTALLDIR/difmap
    * DP3: $INSTALLDIR/DP3
    * DS9: $INSTALLDIR/ds9
    * Dysco: $INSTALLDIR/dysco
    * EveryBeam: $INSTALLDIR/EveryBeam
    * IDG: $INSTALLDIR/idg
    * WSClean: $INSTALLDIR/wsclean

    Python packages such as losoto, lsmtool and RMextract are available in the environment /opt/lofar/pyenv-py3. By default this Python 3 environment is already active.

    To execute a command directly, use
        apptainer exec -B <paths,that,need,to,be,accessible> <path to image> <command> <arguments>
    for example, to run a genericpipeline parset, the following command can be used:
        apptainer exec lofar.simg genericpipeline.py -d -c pipeline.cfg pipeline.parset
    To enter a shell within the image, use
        apptainer shell -B <paths,that,need,to,be,accessible> <path to image>

    The container base is Fedora 40.
