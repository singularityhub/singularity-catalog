bootstrap: docker
from: debian:jessie

%environment
  PATH=/opt/afni:$PATH
  PATH=/opt/ants:$PATH
  PATH=/opt/c3d/bin:$PATH
  PATH=/opt/fsl/bin:$PATH
  PATH=/opt/conda/bin:$PATH
  PATH=/opt/mrtrix3/bin:$PATH
  C3DPATH=/opt/c3d
  ANTSPATH=/opt/ants
  FREESURFER_HOME=/opt/freesurfer
  FSLDIR=/opt/fsl
  export PATH ANTSPATH C3DPATH FREESURFER_HOME FSLDIR

%post

  #----------------------------------------------------------
  # Install common dependencies and create default entrypoint
  #----------------------------------------------------------
  export LANG="en_US.UTF-8"
  export LC_ALL="C.UTF-8"
  ND_ENTRYPOINT="/neurodocker/startup.sh"

  apt-get update -qq && apt-get install -yq --no-install-recommends  \
        apt-utils bzip2 ca-certificates curl locales unzip \
      && apt-get clean \
      && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
      && localedef --force --inputfile=en_US --charmap=UTF-8 C.UTF-8 \
      && chmod 777 /opt && chmod a+s /opt \
      && mkdir -p /neurodocker \
      && if [ ! -f "$ND_ENTRYPOINT" ]; then \
           echo '#!/usr/bin/env bash' >> $ND_ENTRYPOINT \
           && echo 'set +x' >> $ND_ENTRYPOINT \
           && echo 'if [ -z "$*" ]; then /usr/bin/env bash; else /usr/bin/env bash -c "$*"; fi' >> $ND_ENTRYPOINT; \
         fi \
      && chmod -R 777 /neurodocker && chmod a+s /neurodocker

  #--------------------
  # Install AFNI latest
  #--------------------
  PATH=/opt/afni:$PATH
  apt-get update -qq && apt-get install -yq --no-install-recommends ed gsl-bin libglu1-mesa-dev libglib2.0-0 libglw1-mesa \
      libgomp1 libjpeg62 libxm4 netpbm tcsh xfonts-base xvfb \
      && libs_path=/usr/lib/x86_64-linux-gnu \
      && if [ -f $libs_path/libgsl.so.19 ]; then \
             ln $libs_path/libgsl.so.19 $libs_path/libgsl.so.0; \
         fi \
      && echo "Install libxp (not in all ubuntu/debian repositories)" \
      && apt-get install -yq --no-install-recommends libxp6 \
      || /bin/bash -c " \
         curl --retry 5 -o /tmp/libxp6.deb -sSL http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \
         && dpkg -i /tmp/libxp6.deb && rm -f /tmp/libxp6.deb" \
      && echo "Install libpng12 (not in all ubuntu/debian repositories" \
      && apt-get install -yq --no-install-recommends libpng12-0 \
      || /bin/bash -c " \
         curl -o /tmp/libpng12.deb -sSL http://mirrors.kernel.org/debian/pool/main/libp/libpng/libpng12-0_1.2.49-1%2Bdeb7u2_amd64.deb \
         && dpkg -i /tmp/libpng12.deb && rm -f /tmp/libpng12.deb" \
      && apt-get clean \
      && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
      && echo "Downloading AFNI ..." \
      && mkdir -p /opt/afni \
      && curl -sSL --retry 5 https://afni.nimh.nih.gov/pub/dist/tgz/linux_openmp_64.tgz \
      | tar zx -C /opt/afni --strip-components=1

  #-------------------
  # Install ANTs 2.2.0
  #-------------------
  echo "Downloading ANTs ..." \
      && curl -sSL --retry 5 https://dl.dropbox.com/s/2f4sui1z6lcgyek/ANTs-Linux-centos5_x86_64-v2.2.0-0740f91.tar.gz \
      | tar zx -C /opt
  ANTSPATH=/opt/ants
  PATH=/opt/ants:$PATH

  #------------------------
  # Install Convert3D 1.0.0
  #------------------------
  RUN echo "Downloading C3D ..." \
      && mkdir /opt/c3d \
      && curl -sSL --retry 5 https://sourceforge.net/projects/c3d/files/c3d/1.0.0/c3d-1.0.0-Linux-x86_64.tar.gz/download \
      | tar -xzC /opt/c3d --strip-components=1
  C3DPATH=/opt/c3d
  PATH=/opt/c3d/bin:$PATH

  #------------------------
  # Install dcm2niix master
  #------------------------
  deps='cmake g++ gcc git make pigz zlib1g-dev' \
      && apt-get update -qq && apt-get install -yq --no-install-recommends $deps \
      && apt-get clean \
      && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
      && mkdir dcm2niix \
      && curl -sSL https://github.com/rordenlab/dcm2niix/tarball/master | tar xz -C dcm2niix --strip-components 1 \
      && mkdir dcm2niix/build && cd dcm2niix/build \
      && cmake .. && make \
      && make install \
      && rm -rf /tmp/* \
      && apt-get purge -y --auto-remove $deps

  #--------------------------
  # Install FreeSurfer v6.0.0
  #--------------------------
  # Install version minimized for recon-all
  # See https://github.com/freesurfer/freesurfer/issues/70
  apt-get update -qq && apt-get install -yq --no-install-recommends bc libgomp1 libxmu6 libxt6 tcsh perl \
      && apt-get clean \
      && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
      && echo "Downloading minimized FreeSurfer ..." \
      && curl -sSL https://dl.dropbox.com/s/nnzcfttc41qvt31/recon-all-freesurfer6-3.min.tgz | tar xz -C /opt \
      && sed -i '$isource $FREESURFER_HOME/SetUpFreeSurfer.sh' $ND_ENTRYPOINT
  FREESURFER_HOME=/opt/freesurfer

  #-----------------------------------------------------------
  # Install FSL v5.0.10
  # FSL is non-free. If you are considering commerical use
  # of this Docker image, please consult the relevant license:
  # https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Licence
  #-----------------------------------------------------------
  apt-get update -qq && apt-get install -yq --no-install-recommends bc dc libfontconfig1 libfreetype6 libgl1-mesa-dev libglu1-mesa-dev libgomp1 libice6 libmng1 libxcursor1 libxft2 libxinerama1 libxrandr2 libxrender1 libxt6 \
      && apt-get clean \
      && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
      && echo "Downloading FSL ..." \
      && curl -sSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-5.0.10-centos6_64.tar.gz \
      | tar zx -C /opt \
      && /bin/bash /opt/fsl/etc/fslconf/fslpython_install.sh -q -f /opt/fsl \
      && sed -i '$iecho Some packages in this Docker container are non-free' $ND_ENTRYPOINT \
      && sed -i '$iecho If you are considering commercial use of this container, please consult the relevant license:' $ND_ENTRYPOINT \
      && sed -i '$iecho https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Licence' $ND_ENTRYPOINT \
      && sed -i '$isource $FSLDIR/etc/fslconf/fsl.sh' $ND_ENTRYPOINT
  FSLDIR=/opt/fsl
  PATH=/opt/fsl/bin:$PATH

  #--------------------
  # Install MINC 1.9.15
  #--------------------
  apt-get update -qq && apt-get install -yq --no-install-recommends libgl1-mesa-dev libice6 libsm6 libx11-6 libxext6 libxi6 libxmu6 libgomp1 libjpeg62 \
      && apt-get clean \
      && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
      && echo " Downloading MINC, BEASTLIB, and MODELS..." \
      && curl -sSL --retry 5 https://dl.dropbox.com/s/40hjzizaqi91373/minc-toolkit-1.9.15-20170529-CentOS_6.9-x86_64.tar.gz \
      | tar zx -C /opt \
      && curl -sSL --retry 5 http://packages.bic.mni.mcgill.ca/tgz/beast-library-1.1.tar.gz \
      | tar zx -C /opt/minc/share \
      && curl -sSL --retry 5 -o /tmp/mni_90a.zip http://www.bic.mni.mcgill.ca/~vfonov/icbm/2009/mni_icbm152_nlin_sym_09a_minc2.zip \
      && unzip /tmp/mni_90a.zip -d /opt/minc/share/icbm152_model_09a \
      && curl -sSL --retry 5 -o /tmp/mni_90c.zip http://www.bic.mni.mcgill.ca/~vfonov/icbm/2009/mni_icbm152_nlin_sym_09c_minc2.zip \
      && unzip /tmp/mni_90c.zip -d /opt/minc/share/icbm152_model_09c \
      && rm -r /tmp/mni_90*  \
      && sed -i '$isource /opt/minc/minc-toolkit-config.sh' $ND_ENTRYPOINT

  #--------------------------------------------------
  # Add NeuroDebian repository
  # Please note that some packages downloaded through
  # NeuroDebian may have restrictive licenses.
  #--------------------------------------------------
  apt-get update -qq && apt-get install -yq --no-install-recommends dirmngr gnupg \
      && apt-get clean \
      && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
      && curl -sSL http://neuro.debian.net/lists/jessie.us-nh.full \
      > /etc/apt/sources.list.d/neurodebian.sources.list \
      && curl -sSL https://dl.dropbox.com/s/zxs209o955q6vkg/neurodebian.gpg \
      | apt-key add - \
      && (apt-key adv --refresh-keys --keyserver hkp://pool.sks-keyservers.net:80 0xA5D32F012649A5A9 || true) \
      && apt-get update

  # Install NeuroDebian packages
  apt-get update -qq && apt-get install -yq --no-install-recommends dcm2niix git-annex-standalone mrtrix \
      && apt-get clean \
      && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

  apt-get update -qq \
    && apt-get install -y -q --no-install-recommends git \
                                                     vim \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

  #------------------
  # Install Miniconda
  #------------------
  CONDA_DIR=/opt/conda
  PATH=/opt/conda/bin:$PATH
  echo "Downloading Miniconda installer ..." \
      && miniconda_installer=/tmp/miniconda.sh \
      && curl -sSL -o $miniconda_installer https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
      && /bin/bash $miniconda_installer -b -p $CONDA_DIR \
      && rm -f $miniconda_installer \
      && conda config --system --prepend channels conda-forge \
      && conda config --system --set auto_update_conda false \
      && conda config --system --set show_channel_urls true \
      && conda clean -tipsy && sync

  #-------------------------
  # Create conda environment
  #-------------------------
  # 3.6
  conda create -y -q --name neuro36 --channel vida-nyu python=3.6 \
                                                         numpy \
                                                         pandas \
                                                         reprozip \
                                                         traits \
                                                         networkx \
                                                         jupyter \
                                                         seaborn \
                                                         libgcc \
      && sync && conda clean -tipsy && sync \
      && /bin/bash -c "source activate neuro36 \
        && pip install -q --no-cache-dir nipype dipy duecredit mne \
           git+https://github.com/mvdoc/pybids@fix/setup" \
      && sync
  # 2.7
  conda create -y -q --name neuro27 --channel vida-nyu python=2.7 \
                                                         numpy \
                                                         pandas \
                                                         reprozip \
                                                         traits \
                                                         networkx \
                                                         jupyter \
                                                         seaborn \
                                                         pymvpa2 \
                                                         libgcc \
      && sync && conda clean -tipsy && sync \
      && /bin/bash -c "source activate neuro27 \
        && pip install -q --no-cache-dir nipype dipy duecredit mne datalad pprocess \
           git+https://github.com/mvdoc/pybids@fix/setup" \
      && sync \
      && sed -i '$isource activate neuro27' $ND_ENTRYPOINT

  #----------------
  # Install MRtrix3
  #----------------
  echo "Downloading MRtrix3 ..." \
      && curl -sSL --retry 5 https://dl.dropbox.com/s/2g008aaaeht3m45/mrtrix3-Linux-centos6.tar.gz \
      | tar zx -C /opt
  PATH=/opt/mrtrix3/bin:$PATH

  # Make directories for use in discovery
  mkdir /ihome
  mkdir /idata
  mkdir /scratch
  mkdir /data
  mkdir /dartfs
  mkdir /dartfs-hpc


%runscript
  exec /neurodocker/startup.sh "$*"
