Bootstrap: library
From: ubuntu:20.04

####
#
# Authors:      Chris Wood, EPCC, University of Edinburgh <c.wood@epcc.ed.ac.uk>
#               James Harle, National Oceanography Centre <jdha@noc.ac.uk>
# Date:         2019-09-06
# Last updated: 2021-07-12
#
#   Unresolved issues / future work:
#       - significant testing needed - does OpenMPI version on Cirrus need to the same as version in this def file?
#       - do we _need_ to (should we) run all available `make [check|test]` for dependencies?
#       - did I waste a lot of time working out how to compile dependencies from source? (David H suggested that some apt binaries might work, despite my comment below!)
#       - we could change the workflow of all of this by creating individual docker files of all the dependencies (with same base OS image, probably something minimal? alpine?),
#         doing a multistage build, and creating the singularity container from the final resultant docker container. Singularity doensn't (yet) allow multistage builds
#           - however, it's not possible to pull multiple docker images in 1 recipe, so would need to do an incremental build which is probably too much effort for any benefit it would provide  
#       - one of the issues I had running `make check` for hdf5 was with running it as root - mpiexec complains about this. I created the nemo user to run (with the side effect that
#         it created a useful location - the home directory - to store some of the dependencies!). But I then had issues with adding the hdf5 libraries to search paths used by NetCDF, nemo, and xios,
#         so changed --prefix from /home/nemo/hdf5 to /usr/local, but you can't install stuff to there without being root (or sudo, which isn't directly supported in a container). Way round it would be
#         build in /home/nemo as nemo, then install as root, and switch back to nemo user? Is it worth it? But only need to worry about this if we want to run `make check`. Also had similar issues with
#         NCDIR and NFDIR for NetCDF install directories (changed from /home/nemo/netcdf/install to /usr/local). If there's a way round it (and there's a reason to do it), then LD_LIBRARY_PATH and PATH
#         will need to be set and updated
#
#         I also thought it would be useful to keep all the 3rd party dependencies in a separate place, rather than /usr/local, but maybe that's just being a bit OCD...
#       - the nemo-singularity repo is currently private, so need to supply a username/password
#       - I keep the def file in a different repo to the singularity nemo build because it is a different thing - someone running `singularity build` doesn't need the whole singularity-nemo repo (apart from
#         inside the container) 
#
#       - note I currently change branch in the nemo singularity repo rather than use master
#       - I'm having issues with Sing understanding where the hdf5 libs are
####

%files
    input_files/NEMO_in /input_files/NEMO_in
    input_files/MY_SRC.tar.gz /input_files/MY_SRC.tar.gz
    input_files/setup_nemo /input_files/setup_nemo
    input_files/arch/nemo/arch-singularity.fcm /input_files/arch/nemo/arch-singularity.fcm
    input_files/arch/xios/arch-singularity.fcm /input_files/arch/xios/arch-singularity.fcm
    input_files/arch/xios/arch-singularity.env /input_files/arch/xios/arch-singularity.env
    input_files/arch/xios/arch-singularity.path /input_files/arch/xios/arch-singularity.path

%post

    ##
    #
    # Compilation from source necessary where apt-get binaries weren't compiled with necessary dependencies for XIOS and NEMO
    #
    ##

    ##
    # install basic stuff
    ##

    apt install -y locales #locales-all
    locale-gen en_GB en_GB.UTF-8 # en_US en_US.UTF-8

    apt install -y software-properties-common
    add-apt-repository universe
    apt update

    # n.b. 
    #   - libcurl4-openssl-dev also installs libcurl4 (as does curl, if not already installed)
    #   - zlib already installed
    apt install -y python \
                   subversion \
                   wget \
                   git \
                   make \
                   m4 \
                   gcc-10 \
                   gfortran-10 \
                   g++-10 \
                   liburi-perl \
                   libcurl4-openssl-dev \
                   curl \
                   zlib1g-dev \
                   libibverbs-dev \
                   libpmix-dev \
                   libslurm-dev \
                   crudini

    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 
    update-alternatives --install /usr/bin/gfortran gfortran /usr/bin/gfortran-10 100
    ln -s /usr/bin/cpp-10 /usr/bin/cpp

    # this decreases the size of the container
    apt clean

    ##
    # make user `nemo` - mpiexec in hdf5 `make check` complains if run as root (although we're not running it at the moment)
    ##

    adduser --disabled-password --gecos "" nemo

    ###
    # softlink gmake to make
    ###

    ln -s /usr/bin/make /usr/bin/gmake

    ##
    # compiling openmpi
    ##

    # MPI=`crudini --get /input_files/NEMO_in DEFAULT MPI` # For some reason this yanks the whole line including comments
    
    . /input_files/NEMO_in

    if [ -z "$MPI" ] && [ "$MPI_SWAP" = "MPICH" ]
    then
        MPI="MPICH"
    elif [ -z "$MPI" ] && [ "$MPI_SWAP" = "OMPI" ]
    then
        MPI="OMPI"
    fi

    MPI_DIR=/opt/mpi
    mkdir -p $MPI_DIR
    cd $MPI_DIR
    mkdir mpi

    if [ "$MPI" = "MPICH" ]
    then

        apt install -y libfabric-dev

        wget http://www.mpich.org/static/downloads/3.4.2/mpich-3.4.2.tar.gz
        tar -xvzf mpich-3.4.2.tar.gz -C mpi --strip-components 1
        rm mpich-3.4.2.tar.gz
        cd mpi

        ./configure CC=gcc CXX=g++ FC=gfortran --prefix=/opt/mpi/install FFLAGS=-fallow-argument-mismatch
        make
        make install

    elif [ "$MPI" = "OMPI" ]
    then

        wget https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-4.1.1.tar.bz2
        tar -xvjf openmpi-4.1.1.tar.bz2 -C mpi --strip-components 1
        rm openmpi-4.1.1.tar.bz2
        cd mpi
        
        ./configure CC=gcc CXX=g++ FC=gfortran --enable-mpi1-compatibility --prefix=/opt/mpi/install --with-verbs --with-slurm --with-pmix
        make
        make install
    else
       echo "No MPI implementation specified"
       exit 1
    fi

    cd /opt/mpi
    rm -r mpi # removes the 303 mb directory

    ##
    # compile HDF5 libraries
    ##

    HDF_DIR=/opt/hdf5
    mkdir -p $HDF_DIR
    cd $HDF_DIR
    wget -O hdf5.tar.bz2 "https://www.hdfgroup.org/package/hdf5-1-12-0-tar-bz2/?wpdmdl=14584&refresh=60be563cf137e1623086652"
    mkdir hdf
    tar xjvf hdf5.tar.bz2 -C hdf --strip-components 1
    rm hdf5.tar.bz2

    H5DIR=/opt/hdf5/install
    cd hdf

    # n.b. --enable-fortran specifically not needed (https://www.unidata.ucar.edu/software/netcdf/docs/getting_and_building_netcdf.html#build_default)
    CC=/opt/mpi/install/bin/mpicc ./configure --prefix=${H5DIR} --enable-hl --enable-parallel --with-default-api-version=v18
    make
    # maybe we shouldn't bother with make check - it complains about a lot and we're not actually building on a parallel file system
    # so some of the checks are totally irrelevant
    # make check -i RUNPARALLEL='-oversubscribe'
    make install
    cd .. 
    rm -r hdf # removes the 212 mb directory

    ##
    # compile NetCDF libraries
    ##

    NETCDF_DIR=/opt/netcdf
    mkdir -p $NETCDF_DIR
    cd $NETCDF_DIR 

    # C libraries...
    wget -O netcdf.tar.gz https://github.com/Unidata/netcdf-c/archive/v4.8.0.tar.gz
    mkdir netcdf
    tar xzvf netcdf.tar.gz -C netcdf --strip-components 1
    rm netcdf.tar.gz 
    
    cd netcdf
    NCDIR=/opt/netcdf/install
    
    CC=/opt/mpi/install/bin/mpicc FC=/opt/mpi/install/bin/mpifort CPPFLAGS="-I${H5DIR}/include" LDFLAGS="-L${H5DIR}/lib" ./configure --disable-shared --prefix=$NCDIR
    make
    # make check fails; maybe we should avoid running it (only 1 response from a question on the netcdf mailing list, saying it is really finicky) 
    # make check
    make install
    cd .. 
    rm -r netcdf # removes the 125 mb directory

    # ...and the fortran libraries
    wget https://github.com/Unidata/netcdf-fortran/archive/v4.5.3.tar.gz
    mkdir netcdf
    tar xzvf v4.5.3.tar.gz -C netcdf --strip-components 1
    rm v4.5.3.tar.gz
    cd netcdf
    NFDIR=/opt/netcdf/install
    
    CC=/opt/mpi/install/bin/mpicc FC=/opt/mpi/install/bin/mpifort CPPFLAGS="-I${NCDIR}/include -I${H5DIR}/include" LDFLAGS="-L${NCDIR}/lib -L${H5DIR}/lib" LIBS="-lhdf5 -lhdf5_hl -lcurl" ./configure --prefix=$NFDIR --disable-shared
    make
    make install
    cd ..
    rm -r netcdf # removes the 18 mb directory

    ##
    # Now we can install NEMO
    ##

    ln -s /opt/mpi/install/bin/mpif90 /usr/bin/mpif90

    WORK_DIR=/nemo >> $SINGULARITY_ENVIRONMENT
    mkdir $WORK_DIR
    cd $WORK_DIR
    chown nemo:nemo -R $WORK_DIR

    PATH=$PATH:/opt/mpi/install/bin:/opt/hdf5/install/bin
    LD_LIBRARY_PATH=/opt/hdf5/install/lib:$LD_LIBRARY_PATH
   
    cd $WORK_DIR

    . /input_files/NEMO_in
   
    chmod u+x /input_files/setup_nemo 
    /input_files/setup_nemo -x /nemo -w /nemo -s /nemo/AMM7_lite -m singularity -v $NEMO_VERSION -c gnu

    cd /nemo/nemo/cfgs/NEMO/EXP00
    
    # Need to put in here if TOP include top namelist etc    
    ln -s ../../SHARED/namelist_ref namelist_ref
    ln -s ../../SHARED/namelist_ice_ref namelist_ice_ref
    ln -s ../../SHARED/grid_def_nemo.xml grid_def_nemo.xml
    ln -s ../../SHARED/field_def_nemo-oce.xml field_def_nemo-oce.xml
    ln -s ../../SHARED/field_def_nemo-ice.xml field_def_nemo-ice.xml
    ln -s ../../SHARED/domain_def_nemo.xml domain_def_nemo.xml
    ln -s ../../SHARED/axis_def_nemo.xml axis_def_nemo.xml
   
    cd $WORK_DIR
    
    mkdir /opt/nemo
    mv /nemo/nemo/cfgs/NEMO/EXP00/nemo /opt/nemo/

    mkdir /opt/xios
    mv /nemo/nemo/cfgs/NEMO/EXP00/xios_server.exe /opt/xios/xios

    # make everything we've built be owned by `nemo` 
    chown -Rv nemo:nemo /opt
    
    # minimal possible permissions: directories executable; binaries read + executable (need to be readable to that library headers can be read!); everything else only readable for g+o
    chmod -Rv 644 /opt
    find /opt -type d -print0 | xargs -0 chmod -v 511
    find /opt -type f -exec file -i {} + | grep ":[^:]*binary[^:]*$" |  sed 's/^\(.*\):[^:]*$/\1/' | xargs chmod -v 555


    rm -rf /var/lib/apt/lists/* /var/lib/dpkg/info/*
    #echo $LD_LIBRARY_PATH
    #ls /opt/hdf5/install/lib
    #echo "export LD_LIBRARY_PATH=/opt/hdf5/install/lib:\"${LD_LIBRARY_PATH}\"" >> $SINGULARITY_ENVIRONMENT
    #echo $SINGULARITY_ENVIRONMENT
    
%environment
    
    # this is needed - nemo is built dynamically (and openmpi, the other library needed, is dealt with in the wrapper script automagically)
    export LD_LIBRARY_PATH=/opt/hdf5/install/lib:$LD_LIBRARY_PATH

%runscript
    #!/bin/bash

    # This runscript will take 2 arguments: program to run (NEMO or XIOS), and an output directory. By default, the output directory will be the job id (passed using $SLURM_JOB_ID).    

    # create directory so we can symlink to /nemo/nemo/cfgs/GYRE_PISCES/EXP00/
    # we should allow an output directory, and manage this in a cleanup section of the batch script, before deleting the symlinked directory there

    # Improvements:
    #   - update when we use a generic cfg directory
    #   - is using $SLURM_JOB_ID directly here best, or should we pass it as the 2nd argument to the script and use a more generic variable here?
    #   - we could make the arguments a bit more intelligent; e.g.
    #       - if only 1 argument, check whether it's nemo or xios; if neither then it's an output directory (and run nemo in attached mode)
    #       - does the output directory need to be set for both 

    if ! [[ $1 == "nemo" || $1 == "xios" ]]    
    then
      echo "The program argument should be either 'nemo' or 'xios'"
      exit 1
    fi

    results_dir=$2

    if [[ -z $2 ]]
    then
      results_dir=$SLURM_JOB_ID
    fi

    if [[ -z $results_dir ]]
    then
        echo "Please supply an output directory"
        exit 1
    fi

    if [[ ! -d $results_dir ]]
    then
        mkdir $results_dir
    fi 

    cd $results_dir

    for file in /nemo/nemo/cfgs/NEMO/EXP00/*
    do
    
        # check if the file is already symlinked to prevent lots of spurious error messages
        # but, we have to create this linkfile variable: some of the nemo files are themselves symlinks, so the 
        # if statement will fail to create a symlink for those if we just use the base path
        
        linkfile=`basename $file`

        if ! [[ -L $linkfile ]]
        then
            ln -s $file $linkfile
        fi
    done
    

    if [[ $1 == 'nemo' ]]
    then
        /opt/nemo/nemo
    else
        /opt/xios/xios
    fi

    # do some checking here to make sure the job has finished (to do), and then delete the symlinks:

    #find . -type l | while read linkname
    #do
    #    rm $linkname
    #done

%labels
    Author c.wood@epcc.ed.ac.uk
    Author jdha@noc.ac.uk
    Version v0.0.1

%help
    The definition file used to create this container builds NEMO, XIOS, and the following dependencies from source:
        - OpenMPI (4.0.1)
        - HDF5 (1.10.5)
        - NetCDF C (4.7.1) and Fortran (4.5.2) libraries 

    This container 

    To build the container, run

        singularity build nemo.sif nemo.def

    To build, it requires you to have

    The resulting container has one mandatory and on optional arugments: the program to run with that instance (nemo or xios), and an output directory name. If submitted as part of a slurm 
    sunmission, the output directory name will, by default, be the job id

    # more info about running mpi with examples, e.g.

    # mpirun -npernode 1 -n 1 --mca orte_base_help_aggregate 0 --mca btl_vader_single_copy_mechanim none --mca btl ^sm --mca btl_openib_allow_ib true --bind-to core singularity -d exec -B /etc/libibverbs.d --env LD_LIBRARY_PATH=/opt/hdf5/install/lib:$LD_LIBRARY_PATH --pwd $HOME/containers/nemo/cfgs/GYRE_PISCES/EXP00 nemo.sif /opt/nemo/nemo : -N 1 -n 1 singularity exec --pwd $HOME/containers/nemo/cfgs/GYRE_PISCES/EXP00 nemo.sif /nemo/nemo/cfgs/GYRE_PISCES/EXP00/xios_server.exe 
