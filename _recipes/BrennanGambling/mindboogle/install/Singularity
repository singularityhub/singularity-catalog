# Generated by Neurodocker version 0.4.2-3-gf7055a1
# Timestamp: 2019-11-05 01:29:29 UTC
# 
# Thank you for using Neurodocker. If you discover any issues
# or ways to improve this software, please submit an issue or
# pull request on our GitHub repository:
# 
#     https://github.com/kaczmarj/neurodocker

Bootstrap: docker
From: neurodebian:stretch

%post
export ND_ENTRYPOINT="/neurodocker/startup.sh"
apt-get update -qq
apt-get install -y -q --no-install-recommends \
    apt-utils \
    bzip2 \
    ca-certificates \
    curl \
    locales \
    unzip
apt-get clean
rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
dpkg-reconfigure --frontend=noninteractive locales
update-locale LANG="en_US.UTF-8"
chmod 777 /opt && chmod a+s /opt
mkdir -p /neurodocker
if [ ! -f "$ND_ENTRYPOINT" ]; then
  echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT"
  echo 'set -e' >> "$ND_ENTRYPOINT"
  echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT";
fi
chmod -R 777 /neurodocker && chmod a+s /neurodocker

apt-get update -qq
apt-get install -y -q --no-install-recommends \
    graphviz \
    tree \
    git-annex-standalone \
    vim \
    emacs-nox \
    nano \
    less \
    ncdu \
    tig \
    sed \
    build-essential \
    libsm-dev \
    libx11-dev \
    libxt-dev \
    libxext-dev \
    libglu1-mesa
apt-get clean
rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

ln -s /usr/lib/x86_64-linux-gnu /usr/lib64

export PATH="/opt/miniconda-latest/bin:$PATH"
echo "Downloading Miniconda installer ..."
conda_installer="/tmp/miniconda.sh"
curl -fsSL --retry 5 -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
bash "$conda_installer" -b -p /opt/miniconda-latest
rm -f "$conda_installer"
conda update -yq -nbase conda
conda config --system --prepend channels conda-forge
conda config --system --set auto_update_conda false
conda config --system --set show_channel_urls true
sync && conda clean -tipsy && sync
conda create -y -q --name mb
conda install -y -q --name mb \
    'python=3.6' \
    'pip' \
    'jupyter' \
    'cmake' \
    'mesalib' \
    'vtk=8.2.0=py36ha8e561a_201' \
    'pandas' \
    'matplotlib' \
    'colormath' \
    'nipype>=1.1.4' \
    'nilearn' \
    'tbb-devel' \
    'nose' \
    'etelemetry'
sync && conda clean -tipsy && sync
bash -c "source activate mb
  pip install --no-cache-dir  \
      'datalad[full]' \
      'duecredit'"
rm -rf ~/.cache/pip/*
sync
sed -i '$isource activate mb' $ND_ENTRYPOINT


cd /opt

mkdir -p /opt/data && cd /opt/data && \
    curl -sSL https://osf.io/download/rh9km/?revision=2 -o templates.zip && \
    unzip templates.zip && \
    rm -f /opt/data/templates.zip && \
    curl -sSL https://files.osf.io/v1/resources/hvc52/providers/osfstorage/57c1a8f06c613b01f98d68a9/?zip= -o OASIS-TRT-20_brains.zip && \
    mkdir OASIS-TRT-20_brains && \
    cd OASIS-TRT-20_brains && \
    unzip ../OASIS-TRT-20_brains.zip && \
    cd .. && \
    rm OASIS-TRT-20_brains.zip && \
    curl -sSL https://files.osf.io/v1/resources/zevma/providers/osfstorage/5783dfcab83f6901f963735c/?zip= -o cmalabels.zip && \
    mkdir OASIS-TRT-20_DKT31_CMA_labels_v2 && \
    cd OASIS-TRT-20_DKT31_CMA_labels_v2 && \
    unzip ../cmalabels.zip && \
    cd .. && \
    rm cmalabels.zip && \
    curl -sSL https://osf.io/download/d2cmy/ -o OASIS-TRT-20_jointfusion_DKT31_CMA_labels_in_OASIS-30_v2.nii.gz && \
    rm -rf __MACOSX

bash -c 'source /opt/miniconda-latest/etc/profile.d/conda.sh && \
        conda activate mb && \
        git clone https://github.com/nipy/mindboggle.git && \
        cd /opt/mindboggle && \
        python setup.py install && \
        mkdir /opt/vtk_cpp_tools && \
        cd /opt/vtk_cpp_tools && \
        cmake /opt/mindboggle/vtk_cpp_tools && \
        make'

bash -c 'source /opt/miniconda-latest/etc/profile.d/conda.sh && \
        conda activate mb && \
        conda install -y flask && \
        git clone https://github.com/akeshavan/roygbiv && \
        cd /opt/roygbiv && \
        git checkout fbbf31c29952d0ea22ed05d98e0a5a7e7d0827f9 && \
        python setup.py install && \
        cd /opt && \
        rm -rf /opt/roygbiv'

mkdir -p /.jupyter && echo c.NotebookApp.ip = \"0.0.0.0\" > /.jupyter/jupyter_notebook_config.py

apt-get update -qq
apt-get install -y -q --no-install-recommends \
    cmake \
    g++ \
    gcc \
    git \
    make \
    zlib1g-dev
apt-get clean
rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
mkdir -p /tmp/ants/build
git clone https://github.com/ANTsX/ANTs.git /tmp/ants/source
cd /tmp/ants/source
git fetch --tags
git checkout b43df4bfc8
cd /tmp/ants/build
cmake -DBUILD_SHARED_LIBS=ON /tmp/ants/source
make -j 4
mkdir -p /opt/ants-b43df4bfc8
mv bin lib /opt/ants-b43df4bfc8/
mv /tmp/ants/source/Scripts/* /opt/ants-b43df4bfc8/bin
rm -rf /tmp/ants

apt-get update -qq
apt-get install -y -q --no-install-recommends \
    bc \
    libgomp1 \
    libxmu6 \
    libxt6 \
    perl \
    tcsh
apt-get clean
rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
echo "Downloading FreeSurfer ..."
mkdir -p /opt/freesurfer-6.0.0-min
curl -fsSL --retry 5 https://dl.dropbox.com/s/nnzcfttc41qvt31/recon-all-freesurfer6-3.min.tgz \
| tar -xz -C /opt/freesurfer-6.0.0-min --strip-components 1 
sed -i '$isource "/opt/freesurfer-6.0.0-min/SetUpFreeSurfer.sh"' "$ND_ENTRYPOINT"

curl -sSL https://osf.io/download/n3ud2/?revision=1 -o /opt/freesurfer-6.0.0-min/license.txt

echo '{
\n  "pkg_manager": "apt",
\n  "instructions": [
\n    [
\n      "base",
\n      "neurodebian:stretch"
\n    ],
\n    [
\n      "_header",
\n      {
\n        "version": "generic",
\n        "method": "custom"
\n      }
\n    ],
\n    [
\n      "install",
\n      [
\n        "graphviz",
\n        "tree",
\n        "git-annex-standalone",
\n        "vim",
\n        "emacs-nox",
\n        "nano",
\n        "less",
\n        "ncdu",
\n        "tig",
\n        "sed",
\n        "build-essential",
\n        "libsm-dev",
\n        "libx11-dev",
\n        "libxt-dev",
\n        "libxext-dev",
\n        "libglu1-mesa"
\n      ]
\n    ],
\n    [
\n      "run",
\n      "ln -s /usr/lib/x86_64-linux-gnu /usr/lib64"
\n    ],
\n    [
\n      "miniconda",
\n      {
\n        "conda_install": [
\n          "python=3.6",
\n          "pip",
\n          "jupyter",
\n          "cmake",
\n          "mesalib",
\n          "vtk=8.2.0=py36ha8e561a_201",
\n          "pandas",
\n          "matplotlib",
\n          "colormath",
\n          "nipype>=1.1.4",
\n          "nilearn",
\n          "tbb-devel",
\n          "nose",
\n          "etelemetry"
\n        ],
\n        "pip_install": [
\n          "datalad[full]",
\n          "duecredit"
\n        ],
\n        "create_env": "mb",
\n        "activate": true
\n      }
\n    ],
\n    [
\n      "workdir",
\n      "/opt"
\n    ],
\n    [
\n      "run",
\n      "mkdir -p /opt/data && cd /opt/data && \\\\n    curl -sSL https://osf.io/download/rh9km/?revision=2 -o templates.zip && \\\\n    unzip templates.zip && \\\\n    rm -f /opt/data/templates.zip && \\\\n    curl -sSL https://files.osf.io/v1/resources/hvc52/providers/osfstorage/57c1a8f06c613b01f98d68a9/?zip= -o OASIS-TRT-20_brains.zip && \\\\n    mkdir OASIS-TRT-20_brains && \\\\n    cd OASIS-TRT-20_brains && \\\\n    unzip ../OASIS-TRT-20_brains.zip && \\\\n    cd .. && \\\\n    rm OASIS-TRT-20_brains.zip && \\\\n    curl -sSL https://files.osf.io/v1/resources/zevma/providers/osfstorage/5783dfcab83f6901f963735c/?zip= -o cmalabels.zip && \\\\n    mkdir OASIS-TRT-20_DKT31_CMA_labels_v2 && \\\\n    cd OASIS-TRT-20_DKT31_CMA_labels_v2 && \\\\n    unzip ../cmalabels.zip && \\\\n    cd .. && \\\\n    rm cmalabels.zip && \\\\n    curl -sSL https://osf.io/download/d2cmy/ -o OASIS-TRT-20_jointfusion_DKT31_CMA_labels_in_OASIS-30_v2.nii.gz && \\\\n    rm -rf __MACOSX"
\n    ],
\n    [
\n      "run_bash",
\n      "source /opt/miniconda-latest/etc/profile.d/conda.sh && \\\\n        conda activate mb && \\\\n        git clone https://github.com/nipy/mindboggle.git && \\\\n        cd /opt/mindboggle && \\\\n        python setup.py install && \\\\n        mkdir /opt/vtk_cpp_tools && \\\\n        cd /opt/vtk_cpp_tools && \\\\n        cmake /opt/mindboggle/vtk_cpp_tools && \\\\n        make"
\n    ],
\n    [
\n      "env",
\n      {
\n        "vtk_cpp_tools": "/opt/vtk_cpp_tools"
\n      }
\n    ],
\n    [
\n      "run_bash",
\n      "source /opt/miniconda-latest/etc/profile.d/conda.sh && \\\\n        conda activate mb && \\\\n        conda install -y flask && \\\\n        git clone https://github.com/akeshavan/roygbiv && \\\\n        cd /opt/roygbiv && \\\\n        git checkout fbbf31c29952d0ea22ed05d98e0a5a7e7d0827f9 && \\\\n        python setup.py install && \\\\n        cd /opt && \\\\n        rm -rf /opt/roygbiv"
\n    ],
\n    [
\n      "run",
\n      "mkdir -p /.jupyter && echo c.NotebookApp.ip = \\\"0.0.0.0\\\" > /.jupyter/jupyter_notebook_config.py"
\n    ],
\n    [
\n      "ants",
\n      {
\n        "version": "b43df4bfc8",
\n        "method": "source",
\n        "cmake_opts": "-DBUILD_SHARED_LIBS=ON",
\n        "make_opts": "-j 4"
\n      }
\n    ],
\n    [
\n      "freesurfer",
\n      {
\n        "version": "6.0.0-min"
\n      }
\n    ],
\n    [
\n      "run",
\n      "curl -sSL https://osf.io/download/n3ud2/?revision=1 -o /opt/freesurfer-6.0.0-min/license.txt"
\n    ]
\n  ]
\n}' > /neurodocker/neurodocker_specs.json

%environment
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
export ND_ENTRYPOINT="/neurodocker/startup.sh"
export CONDA_DIR="/opt/miniconda-latest"
export PATH="/opt/miniconda-latest/bin:$PATH"
export vtk_cpp_tools="/opt/vtk_cpp_tools"
export ANTSPATH="/opt/ants-b43df4bfc8/bin"
export PATH="/opt/ants-b43df4bfc8/bin:$PATH"
export LD_LIBRARY_PATH="/opt/ants-b43df4bfc8/lib:$LD_LIBRARY_PATH"
export FREESURFER_HOME="/opt/freesurfer-6.0.0-min"
export PATH="/opt/freesurfer-6.0.0-min/bin:$PATH"

%runscript
/neurodocker/startup.sh "$@"
