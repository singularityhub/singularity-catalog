BootStrap: docker
From: nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04

%labels

    APPLICATION_NAME tensorflow-gpu and Chemistry

    SYSTEM_NAME Comet, SDSC (XSEDE)

    AUTHOR_NAME Rohit Farmer
    AUTHOR_EMAIL rohit.farmer@gmail.com

%help
    This container conatins:
	    Python 2.7
        Tensorflow-gpu == 1.9.0
        Keras == 2.2.3
        Tflon (A wraper for TensorFlow https://bitbucket.org/mkmatlock/tflon)
        numpy==1.14.0
        Numpy == 1.14.0, Pandas == 0.22.0, Scipy (latest), Sklearn (latest), Matplotlib == 1.5.0
        OpenBabel == 2.4.1, Pybel (latest), RDKit (latest)
        OpenMpi == 1.8.4 (Cuda aware) and Horovod (latest)

%setup


%environment

    # Set system locale
    LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64:/usr/local/cuda-9.0/extras/CUPTI/lib64:/usr/local/nvidia/lib:/usr/local/nvidia/lib64:/.singularity.d/libs
    PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
    SCONS_HORRIBLE_REGRESSION_TEST_HACK=True
    LANG=C.UTF-8 LC_ALL=C.UTF-8

  
%post
    
    # Make filesystem mount points
    mkdir /cvmfs /oasis /projects /scratch

    # Change to tmp directory to download temporary files
    cd /tmp

    apt-get -y update --fix-missing
    apt-get install -y --no-install-recommends \
        autoconf \
        automake \
        build-essential \
        ca-certificates \
        cmake \
        cuda-9.0 \
        gcc \
        g++ \
        gfortran \
        git \
        libtool \
        libjpeg-dev \
        libpng-dev \
        libatlas-base-dev \
        libxml2-dev \
        zlib1g-dev \
        libcairo2-dev \
        libeigen2-dev \
        libeigen3-dev \
        libcupti-dev \
        libpcre3-dev \
        sqlite3 \
        libsqlite3-dev \
        libboost-dev \
        libboost-system-dev \
        libboost-thread-dev \
        libboost-serialization-dev \
        libboost-python-dev \
        libboost-regex-dev \
        mercurial \
        vim \
        wget \
        pkg-config \
        python \
        python-dev \
        python-pip \
        python-setuptools \
        scons \
        zip

    export LANG=C.UTF-8 LC_ALL=C.UTF-8

# Install swig
    mkdir -p /tmp/swig
    cd /tmp/swig
    wget -O swig-3.0.12.tar.gz https://downloads.sourceforge.net/project/swig/swig/swig-3.0.12/swig-3.0.12.tar.gz
    tar xzf swig-3.0.12.tar.gz
    cd swig-3.0.12
    ./configure --prefix=/usr
    make -j $(nproc)
    make install

# Update pip (I am keeping same version as that on swami)
    pip --no-cache-dir install --upgrade pip==9.0.3

# Additional python packages
    
    pip --no-cache-dir install pyscons
    pip --no-cache-dir install Pyro4==4.12
    pip --no-cache-dir install numpy==1.14.0
    pip --no-cache-dir install pandas==0.22.0

# Install Tensorflow-gpu
    pip --no-cache-dir install tensorflow-gpu==1.9.0
    pip --no-cache-dir install keras

# Install tflon (delete /tmp/tflon_download directory if you happen to run the build again)
    pip --no-cache-dir install dill openopt h5py pyarrow sklearn scikit-image skll FuncDesigner statsmodels matplotlib==1.5.0
    
    mkdir -p /tmp/tflon_download
    cd /tmp/tflon_download
    hg clone https://bitbucket.org/mkmatlock/tflon
    cd tflon
    pip install .
    
# Install MPI (Match the version with the cluster)
    mkdir -p /tmp/mpi
    cd /tmp/mpi
    wget -O openmpi-1.8.4.tar.bz2 https://download.open-mpi.org/release/open-mpi/v1.8/openmpi-1.8.4.tar.bz2
    tar -xjf openmpi-1.8.4.tar.bz2
    cd openmpi-1.8.4
    ./configure --prefix=/usr/local --with-cuda
    make -j $(nproc)
    make install
    ldconfig

    pip --no-cache-dir install mpi4py
    HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_GPU_ALLGATHER=MPI HOROVOD_GPU_BROADCAST=MPI HOROVOD_ALLOW_MIXED_GPU_IMPL=1 pip --no-cache-dir install horovod
    
# Install RDKit
    apt-get install -y python-rdkit librdkit1 rdkit-data

# Install OpenBabel
    mkdir -p /tmp/openbabel
    cd /tmp/openbabel
    wget -O openbabel-2-4-1.tar.gz https://github.com/openbabel/openbabel/archive/openbabel-2-4-1.tar.gz
    tar zxf openbabel-2-4-1.tar.gz
    mkdir -p openbabel.build
    cd openbabel.build
    cmake ../openbabel-openbabel-2-4-1 -DPYTHON_BINDINGS=ON -DRUN_SWIG=ON
    make -j $(nproc)
    make install

# Cleanup
    apt-get clean
    rm -rf /var/lib/apt/lists/*
    rm -rf /tmp/openbabel /tmp/mpi /tmp/tflon_download /tmp/swig
