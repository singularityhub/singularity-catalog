BootStrap: debootstrap
OSVersion: xenial
MirrorURL: http://us.archive.ubuntu.com/ubuntu/
Include: bash vim less man-db apt-utils tzdata

%labels
    Maintainer uconn-hpc

%help
A container for Tensorflow GPU development based on Ubuntu 16.04.
Uses Python 3.6, and Tensorflow-GPU 1.12.0.

%environment
    LC_ALL=C
    LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib:/usr/local/cuda/extras/CUPTI/lib64
    TZ='America/New_York'

    export LC_ALL LD_LIBRARY_PATH TZ

%post
    LC_ALL=C
    LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:$LD_LIBRARY_PATH
    TZ='America/New_York'
    DEBIAN_FRONTEND=noninteractive

    export LC_ALL LD_LIBRARY_PATH TZ DEBIAN_FRONTEND

    ## Clean Apt cache
    apt-get clean
    rm -rf /var/cache/apt

    ## Fix Sources.list for repositories
    ## Include release | main - restricted - universe
    printf "#------------------------------------------------------------------------------#\n#                            OFFICIAL UBUNTU REPOS                             #\n#------------------------------------------------------------------------------#\n\n\n###### Ubuntu Main Repos\ndeb http://us.archive.ubuntu.com/ubuntu/ xenial main restricted universe \ndeb-src http://us.archive.ubuntu.com/ubuntu/ xenial main restricted universe \n\n###### Ubuntu Update Repos\ndeb http://us.archive.ubuntu.com/ubuntu/ xenial-security main restricted universe \ndeb http://us.archive.ubuntu.com/ubuntu/ xenial-updates main restricted universe \ndeb-src http://us.archive.ubuntu.com/ubuntu/ xenial-security main restricted universe \ndeb-src http://us.archive.ubuntu.com/ubuntu/ xenial-updates main restricted universe\n" > /etc/apt/sources.list

    ## Update container
    apt-get update
    apt-get -y --with-new-pkgs upgrade
    apt-get -y autoremove
    apt-get clean
    rm -rf /var/cache/apt

    ## Make cluster mount points
    mkdir /apps /apps2 /scratch
    touch /usr/bin/nvidia-smi
    touch /usr/bin/nvidia-persistenced
    touch /usr/bin/nvidia-debugdump
    touch /usr/bin/nvidia-cuda-mps-control
    touch /usr/bin/nvidia-cuda-mps-server

    ## Install Python
    PYVER=3.6.7
    TFLOW=1.12.0
    CORES=$(expr $(nproc) / 2)
    apt-get -y install wget build-essential checkinstall libreadline6-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev systemtap-sdt-dev libffi-dev libexpat1-dev zlib1g-dev
    wget --no-check-certificate https://www.python.org/ftp/python/$PYVER/Python-$PYVER.tar.xz
    tar xf Python-$PYVER.tar.xz
    cd Python-$PYVER
    rm -rf ./Modules/expat && rm -rf ./Modules/zlib
    ./configure --enable-ipv6 --enable-shared --with-computed-gotos --with-dbmliborder=gdbm:ndbm:bdb --with-system-expat --with-system-ffi --enable-loadable-sqlite-extensions --with-dtrace --enable-optimizations --enable-unicode=ucs4
    make -j $CORES
    make altinstall
    cd ../
    ln -s /usr/local/bin/python3.6 /usr/local/bin/python3
    pip3.6 install -U pip
    pip install -U setuptools
    pip install -U wheel

    ## Add NVIDIA repositories
    apt-get -y install wget
    apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
    wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-repo-ubuntu1604_10.0.130-1_amd64.deb
    wget http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/nvidia-machine-learning-repo-ubuntu1604_1.0.0-1_amd64.deb
    dpkg -i ./cuda* ./nvidia-machine*
    apt-get update

    ## Install CUDA 9.0 and Tensorflow
    apt-get -y install cuda9.0 cuda-cublas-9-0 cuda-cufft-9-0 cuda-curand-9-0 cuda-cusolver-9-0 cuda-cusparse-9-0 libcudnn7=7.2.1.38-1+cuda9.0 libnccl2=2.2.13-1+cuda9.0 cuda-command-line-tools-9-0
    ln -s /usr/local/cuda-9.0 /usr/local/cuda
    apt-get update
    apt-get -y install libnvinfer4=4.1.2-1+cuda9.0
    pip install -U tensorflow-gpu==$TFLOW

    ## Cleanup
    rm -rf /Python-$PYVER*
    rm -f /cuda-repo*
    rm -f /nvidia-machine*
    apt-get clean
    rm -rf /var/cache/apt

%test
    echo "Image Build Date: $(date)"
    echo "Ubuntu $(cat /etc/os-release | grep VERSION= | sed 's|VERSION=||' | sed 's|"||g')"
    LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH python3 --version
    LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH python3 -c "import tkinter, sqlite3, readline, curses"
    LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH pip --version
    LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH pip list

%runscript
    echo "Ubuntu $(cat /etc/os-release | grep VERSION= | sed 's|VERSION=||' | sed 's|"||g')"
    echo "Image Build Date: Nov 14 2018"
    echo "$(python3 --version)"
    echo "$(pip list --format freeze | grep tensorflow --color=none | sed 's|==|\ |')"

